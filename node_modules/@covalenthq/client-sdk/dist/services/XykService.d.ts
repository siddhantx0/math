import { Chain, Quote, Response, ChainID, Source } from "./CovalentClient";
import { Chains } from "../util/Chains";
declare class PoolResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: Pool[];
    /** * Pagination metadata. */
    pagination: Pagination;
    constructor(data: PoolResponse);
}
declare class Pool {
    /** * The pair address. */
    exchange: string;
    swap_count_24h: number;
    /** * The total liquidity converted to fiat in `quote-currency`. */
    total_liquidity_quote: number;
    volume_24h_quote: number;
    fee_24h_quote: number;
    /** * Total supply of this pool token. */
    total_supply: bigint | null;
    /** * The exchange rate for the requested quote currency. */
    quote_rate: number;
    /** * A prettier version of the total liquidity quote for rendering purposes. */
    pretty_total_liquidity_quote: string;
    /** * A prettier version of the volume 24h quote for rendering purposes. */
    pretty_volume_24h_quote: string;
    /** * A prettier version of the fee 24h quote for rendering purposes. */
    pretty_fee_24h_quote: string;
    /** * A prettier version of the volume 7d quote for rendering purposes. */
    pretty_volume_7d_quote: string;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * The requested chain ID eg: `1`. */
    chain_id: string;
    /** * The name of the DEX, eg: `uniswap_v2`. */
    dex_name: string;
    volume_7d_quote: number;
    annualized_fee: number;
    token_0: Token;
    token_1: Token;
    constructor(data: Pool);
}
declare class Pagination {
    /** * True is there is another page. */
    has_more: boolean;
    /** * The requested page number. */
    page_number: number;
    /** * The requested number of items on the current page. */
    page_size: number;
    /** * The total number of items across all pages for this request. */
    total_count: number;
    constructor(data: Pagination);
}
declare class Explorer {
    /** * The name of the explorer. */
    label: string;
    /** * The URL of the explorer. */
    url: string;
    constructor(data: Explorer);
}
declare class Token {
    /** * Use the relevant `contract_address` to lookup prices, logos, token transfers, etc. */
    contract_address: string;
    /** * The string returned by the `name()` method. */
    contract_name: string;
    volume_in_24h: string;
    volume_out_24h: string;
    /** * The exchange rate for the requested quote currency. */
    quote_rate: number;
    reserve: string;
    /** * The contract logo URL. */
    logo_url: string;
    /** * The ticker symbol for this contract. This field is set by a developer and non-unique across a network. */
    contract_ticker_symbol: string;
    /** * Use contract decimals to format the token balance for display purposes - divide the balance by `10^{contract_decimals}`. */
    contract_decimals: number;
    volume_in_7d: string;
    volume_out_7d: string;
    constructor(data: Token);
}
declare class PoolToDexResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested address. */
    address: string;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: PoolToDexItem[];
    constructor(data: PoolToDexResponse);
}
declare class SupportedDex {
    /** * The requested chain ID eg: `1`. */
    chain_id: string;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * The name of the DEX, eg: `uniswap_v2`. */
    dex_name: string;
    /** * A display-friendly name for the dex. */
    display_name: string;
    /** * The dex logo URL. */
    logo_url: string;
    factory_contract_address: string;
    router_contract_addresses: string[];
    swap_fee: number;
    constructor(data: SupportedDex);
}
declare class PoolToDexItem extends SupportedDex {
    /** * The dex logo URL. */
    logo_url: string;
    constructor(data: PoolToDexItem);
}
declare class PoolByAddressResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: PoolWithTimeseries[];
    /** * Pagination metadata. */
    pagination: Pagination;
    constructor(data: PoolByAddressResponse);
}
declare class PoolWithTimeseries {
    /** * The pair address. */
    exchange: string;
    /** * A list of explorers for this address. */
    explorers: Explorer[];
    swap_count_24h: number;
    /** * The total liquidity converted to fiat in `quote-currency`. */
    total_liquidity_quote: number;
    volume_24h_quote: number;
    fee_24h_quote: number;
    /** * Total supply of this pool token. */
    total_supply: bigint | null;
    /** * The exchange rate for the requested quote currency. */
    quote_rate: number;
    /** * The requested chain ID eg: `1`. */
    chain_id: string;
    /** * The name of the DEX, eg: `uniswap_v2`. */
    dex_name: string;
    volume_7d_quote: number;
    annualized_fee: number;
    /** * A prettier version of the total liquidity quote for rendering purposes. */
    pretty_total_liquidity_quote: string;
    /** * A prettier version of the volume 24h quote for rendering purposes. */
    pretty_volume_24h_quote: string;
    /** * A prettier version of the fee 24h quote for rendering purposes. */
    pretty_fee_24h_quote: string;
    /** * A prettier version of the volume 7d quote for rendering purposes. */
    pretty_volume_7d_quote: string;
    token_0: Token;
    token_1: Token;
    token_0_reserve_quote: number;
    token_1_reserve_quote: number;
    volume_timeseries_7d: VolumeTimeseries[];
    volume_timeseries_30d: VolumeTimeseries[];
    liquidity_timeseries_7d: LiquidityTimeseries[];
    liquidity_timeseries_30d: LiquidityTimeseries[];
    price_timeseries_7d: PriceTimeseries[];
    price_timeseries_30d: PriceTimeseries[];
    constructor(data: PoolWithTimeseries);
}
declare class VolumeTimeseries {
    /** * The name of the DEX, eg: `uniswap_v2`. */
    dex_name: string;
    /** * The requested chain ID eg: `1`. */
    chain_id: string;
    dt: Date;
    /** * The pair address. */
    exchange: string;
    sum_amount0in: string;
    sum_amount0out: string;
    sum_amount1in: string;
    sum_amount1out: string;
    volume_quote: number;
    /** * A prettier version of the volume quote for rendering purposes. */
    pretty_volume_quote: string;
    token_0_quote_rate: number;
    token_1_quote_rate: number;
    swap_count_24: number;
    constructor(data: VolumeTimeseries);
}
declare class LiquidityTimeseries {
    /** * The name of the DEX, eg: `uniswap_v2`. */
    dex_name: string;
    /** * The requested chain ID eg: `1`. */
    chain_id: string;
    dt: Date;
    /** * The pair address. */
    exchange: string;
    r0_c: string;
    r1_c: string;
    liquidity_quote: number;
    /** * A prettier version of the liquidity quote for rendering purposes. */
    pretty_liquidity_quote: string;
    token_0_quote_rate: number;
    token_1_quote_rate: number;
    constructor(data: LiquidityTimeseries);
}
declare class PriceTimeseries {
    /** * The name of the DEX, eg: `uniswap_v2`. */
    dex_name: string;
    /** * The requested chain ID eg: `1`. */
    chain_id: string;
    dt: Date;
    /** * The pair address. */
    exchange: string;
    price_of_token0_in_token1: number;
    /** * A prettier version of the price token0 for rendering purposes. */
    pretty_price_of_token0_in_token1: string;
    price_of_token0_in_token1_description: string;
    price_of_token1_in_token0: number;
    /** * A prettier version of the price token1 for rendering purposes. */
    pretty_price_of_token1_in_token0: string;
    price_of_token1_in_token0_description: string;
    /** * The requested quote currency eg: `USD`. */
    quote_currency: string;
    price_of_token0_in_quote_currency: number;
    price_of_token1_in_quote_currency: number;
    constructor(data: PriceTimeseries);
}
declare class PoolsDexDataResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested address. */
    address: string;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * The requested quote currency eg: `USD`. */
    quote_currency: string;
    /** * List of response items. */
    items: PoolsDexDataItem[];
    /** * Pagination metadata. */
    pagination: Pagination;
    constructor(data: PoolsDexDataResponse);
}
declare class PoolsDexDataItem {
    /** * The name of the DEX, eg: `uniswap_v2`. */
    dex_name: string;
    /** * The pair address. */
    exchange: string;
    /** * The combined ticker symbol of token0 and token1 separated with a hypen. */
    exchange_ticker_symbol: string;
    /** * The dex logo URL for the pair address. */
    exchange_logo_url: string;
    /** * The list of explorers for the token address. */
    explorers: Explorer[];
    /** * The total liquidity converted to fiat in `quote-currency`. */
    total_liquidity_quote: number;
    /** * A prettier version of the total liquidity quote for rendering purposes. */
    pretty_total_liquidity_quote: string;
    /** * The volume 24h converted to fiat in `quote-currency`. */
    volume_24h_quote: number;
    /** * The volume 7d converted to fiat in `quote-currency`. */
    volume_7d_quote: number;
    /** * The fee 24h converted to fiat in `quote-currency`. */
    fee_24h_quote: number;
    /** * The exchange rate for the requested quote currency. */
    quote_rate: number;
    /** * A prettier version of the quote rate for rendering purposes. */
    pretty_quote_rate: string;
    /** * The annual fee percentage. */
    annualized_fee: number;
    /** * A prettier version of the volume 24h quote for rendering purposes. */
    pretty_volume_24h_quote: string;
    /** * A prettier version of the volume 7d quote for rendering purposes. */
    pretty_volume_7d_quote: string;
    /** * A prettier version of the fee 24h quote for rendering purposes. */
    pretty_fee_24h_quote: string;
    /** * Token0's contract metadata and reserve data. */
    token_0: PoolsDexToken;
    /** * Token1's contract metadata and reserve data. */
    token_1: PoolsDexToken;
    constructor(data: PoolsDexDataItem);
}
declare class PoolsDexToken {
    /** * The reserves for the token. */
    reserve: string;
    /** * The string returned by the `name()` method. */
    contract_name: string;
    /** * Use contract decimals to format the token balance for display purposes - divide the balance by `10^{contract_decimals}`. */
    contract_decimals: number;
    /** * The ticker symbol for this contract. This field is set by a developer and non-unique across a network. */
    contract_ticker_symbol: string;
    /** * Use the relevant `contract_address` to lookup prices, logos, token transfers, etc. */
    contract_address: string;
    /** * The contract logo URL. */
    logo_url: string;
    /** * The exchange rate for the requested quote currency. */
    quote_rate: number;
    constructor(data: PoolsDexToken);
}
declare class AddressExchangeBalancesResponse {
    /** * The requested address. */
    address: string;
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: UniswapLikeBalanceItem[];
    constructor(data: AddressExchangeBalancesResponse);
}
declare class UniswapLikeBalanceItem {
    token_0: UniswapLikeToken;
    token_1: UniswapLikeToken;
    pool_token: UniswapLikeTokenWithSupply;
    constructor(data: UniswapLikeBalanceItem);
}
declare class UniswapLikeToken {
    /** * Use contract decimals to format the token balance for display purposes - divide the balance by `10^{contract_decimals}`. */
    contract_decimals: number;
    /** * The ticker symbol for this contract. This field is set by a developer and non-unique across a network. */
    contract_ticker_symbol: string;
    /** * Use the relevant `contract_address` to lookup prices, logos, token transfers, etc. */
    contract_address: string;
    /** * The contract logo URL. */
    logo_url: string;
    /** * The asset balance. Use `contract_decimals` to scale this balance for display purposes. */
    balance: bigint | null;
    quote: number;
    /** * A prettier version of the quote for rendering purposes. */
    pretty_quote: string;
    /** * The exchange rate for the requested quote currency. */
    quote_rate: number;
    constructor(data: UniswapLikeToken);
}
declare class UniswapLikeTokenWithSupply {
    /** * Use contract decimals to format the token balance for display purposes - divide the balance by `10^{contract_decimals}`. */
    contract_decimals: number;
    /** * The ticker symbol for this contract. This field is set by a developer and non-unique across a network. */
    contract_ticker_symbol: string;
    /** * Use the relevant `contract_address` to lookup prices, logos, token transfers, etc. */
    contract_address: string;
    /** * The contract logo URL. */
    logo_url: string;
    /** * The asset balance. Use `contract_decimals` to scale this balance for display purposes. */
    balance: bigint | null;
    quote: number;
    /** * A prettier version of the quote for rendering purposes. */
    pretty_quote: string;
    /** * The exchange rate for the requested quote currency. */
    quote_rate: number;
    /** * Total supply of this pool token. */
    total_supply: bigint | null;
    constructor(data: UniswapLikeTokenWithSupply);
}
declare class NetworkExchangeTokensResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: TokenV2Volume[];
    /** * Pagination metadata. */
    pagination: Pagination;
    constructor(data: NetworkExchangeTokensResponse);
}
declare class TokenV2Volume {
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * The requested chain ID eg: `1`. */
    chain_id: string;
    /** * The name of the DEX, eg: `uniswap_v2`. */
    dex_name: string;
    /** * Use the relevant `contract_address` to lookup prices, logos, token transfers, etc. */
    contract_address: string;
    /** * The string returned by the `name()` method. */
    contract_name: string;
    total_liquidity: string;
    total_volume_24h: string;
    /** * The contract logo URL. */
    logo_url: string;
    /** * The ticker symbol for this contract. This field is set by a developer and non-unique across a network. */
    contract_ticker_symbol: string;
    /** * Use contract decimals to format the token balance for display purposes - divide the balance by `10^{contract_decimals}`. */
    contract_decimals: number;
    swap_count_24h: number;
    /** * The list of explorers for the token address. */
    explorers: Explorer[];
    /** * The exchange rate for the requested quote currency. */
    quote_rate: number;
    /** * The 24h exchange rate for the requested quote currency. */
    quote_rate_24h: number;
    /** * A prettier version of the exchange rate for rendering purposes. */
    pretty_quote_rate: string;
    /** * A prettier version of the 24h exchange rate for rendering purposes. */
    pretty_quote_rate_24h: string;
    /** * A prettier version of the total liquidity quote for rendering purposes. */
    pretty_total_liquidity_quote: string;
    /** * A prettier version of the 24h volume quote for rendering purposes. */
    pretty_total_volume_24h_quote: string;
    /** * The total liquidity converted to fiat in `quote-currency`. */
    total_liquidity_quote: number;
    /** * The total volume 24h converted to fiat in `quote-currency`. */
    total_volume_24h_quote: number;
    constructor(data: TokenV2Volume);
}
declare class NetworkExchangeTokenViewResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: TokenV2VolumeWithChartData[];
    /** * Pagination metadata. */
    pagination: Pagination;
    constructor(data: NetworkExchangeTokenViewResponse);
}
declare class TokenV2VolumeWithChartData {
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * The requested chain ID eg: `1`. */
    chain_id: string;
    /** * The name of the DEX, eg: `uniswap_v2`. */
    dex_name: string;
    /** * Use the relevant `contract_address` to lookup prices, logos, token transfers, etc. */
    contract_address: string;
    /** * The string returned by the `name()` method. */
    contract_name: string;
    /** * A list of explorers for this address. */
    explorers: Explorer[];
    /** * The total liquidity unscaled value. */
    total_liquidity: string;
    /** * The total volume 24h unscaled value. */
    total_volume_24h: string;
    /** * The contract logo URL. */
    logo_url: string;
    /** * The ticker symbol for this contract. This field is set by a developer and non-unique across a network. */
    contract_ticker_symbol: string;
    /** * Use contract decimals to format the token balance for display purposes - divide the balance by `10^{contract_decimals}`. */
    contract_decimals: number;
    /** * The total amount of swaps in the last 24h. */
    swap_count_24h: number;
    /** * The exchange rate for the requested quote currency. */
    quote_rate: number;
    /** * The 24h exchange rate for the requested quote currency. */
    quote_rate_24h: number;
    /** * A prettier version of the exchange rate for rendering purposes. */
    pretty_quote_rate: string;
    /** * A prettier version of the 24h exchange rate for rendering purposes. */
    pretty_quote_rate_24h: string;
    /** * A prettier version of the total liquidity quote for rendering purposes. */
    pretty_total_liquidity_quote: string;
    /** * A prettier version of the 24h volume quote for rendering purposes. */
    pretty_total_volume_24h_quote: string;
    /** * The total liquidity converted to fiat in `quote-currency`. */
    total_liquidity_quote: number;
    /** * The total volume 24h converted to fiat in `quote-currency`. */
    total_volume_24h_quote: number;
    /** * The number of transactions in the last 24h. */
    transactions_24h: number;
    volume_timeseries_7d: VolumeTokenTimeseries[];
    volume_timeseries_30d: VolumeTokenTimeseries[];
    liquidity_timeseries_7d: LiquidityTokenTimeseries[];
    liquidity_timeseries_30d: LiquidityTokenTimeseries[];
    price_timeseries_7d: PriceTokenTimeseries[];
    price_timeseries_30d: PriceTokenTimeseries[];
    constructor(data: TokenV2VolumeWithChartData);
}
declare class VolumeTokenTimeseries {
    /** * The name of the DEX, eg: `uniswap_v2`. */
    dex_name: string;
    /** * The requested chain ID eg: `1`. */
    chain_id: string;
    /** * The current date. */
    dt: Date;
    /** * The total volume unscaled for this day. */
    total_volume: string;
    /** * The volume in `quote-currency` denomination. */
    volume_quote: number;
    /** * A prettier version of the volume quote for rendering purposes. */
    pretty_volume_quote: string;
    constructor(data: VolumeTokenTimeseries);
}
declare class LiquidityTokenTimeseries {
    /** * The name of the DEX, eg: `uniswap_v2`. */
    dex_name: string;
    /** * The requested chain ID eg: `1`. */
    chain_id: string;
    /** * The current date. */
    dt: Date;
    /** * The total liquidity unscaled up to this day. */
    total_liquidity: string;
    /** * The liquidity in `quote-currency` denomination. */
    liquidity_quote: number;
    /** * A prettier version of the liquidity quote for rendering purposes. */
    pretty_liquidity_quote: string;
    constructor(data: LiquidityTokenTimeseries);
}
declare class PriceTokenTimeseries {
    /** * The name of the DEX, eg: `uniswap_v2`. */
    dex_name: string;
    /** * The requested chain ID eg: `1`. */
    chain_id: string;
    /** * The current date. */
    dt: Date;
    /** * The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`. */
    quote_currency: string;
    /** * The exchange rate for the requested quote currency. */
    quote_rate: number;
    /** * A prettier version of the exchange rate for rendering purposes. */
    pretty_quote_rate: string;
    constructor(data: PriceTokenTimeseries);
}
declare class SupportedDexesResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * List of response items. */
    items: SupportedDex[];
    /** * Pagination metadata. */
    pagination: Pagination;
    constructor(data: SupportedDexesResponse);
}
declare class SingleNetworkExchangeTokenResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: PoolWithTimeseries[];
    /** * Pagination metadata. */
    pagination: Pagination;
    constructor(data: SingleNetworkExchangeTokenResponse);
}
declare class TransactionsForAccountAddressResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: ExchangeTransaction[];
    /** * Pagination metadata. */
    pagination: Pagination;
    constructor(data: TransactionsForAccountAddressResponse);
}
declare class ExchangeTransaction {
    /** * The block signed timestamp in UTC. */
    block_signed_at: Date;
    /** * The requested transaction hash. */
    tx_hash: string;
    act: string;
    /** * The requested address. */
    address: string;
    /** * A list of explorers for this transaction. */
    explorers: Explorer[];
    amount_0: string;
    amount_1: string;
    amount_0_in: string;
    amount_0_out: string;
    amount_1_in: string;
    amount_1_out: string;
    to_address: string;
    from_address: string;
    sender_address: string;
    total_quote: number;
    /** * A prettier version of the total quote for rendering purposes. */
    pretty_total_quote: string;
    /** * The value attached to this tx. */
    value: bigint | null;
    /** * The value attached in `quote-currency` to this tx. */
    value_quote: number;
    /** * A prettier version of the quote for rendering purposes. */
    pretty_value_quote: string;
    /** * The requested chain native gas token metadata. */
    gas_metadata: ContractMetadata;
    /** * The amount of gas supplied for this tx. */
    gas_offered: number;
    /** * The gas spent for this tx. */
    gas_spent: number;
    /** * The gas price at the time of this tx. */
    gas_price: number;
    /** * The total transaction fees (`gas_price` * `gas_spent`) paid for this tx, denoted in wei. */
    fees_paid: bigint | null;
    /** * The gas spent in `quote-currency` denomination. */
    gas_quote: number;
    /** * A prettier version of the quote for rendering purposes. */
    pretty_gas_quote: string;
    /** * The native gas exchange rate for the requested `quote-currency`. */
    gas_quote_rate: number;
    /** * The requested quote currency eg: `USD`. */
    quote_currency: string;
    token_0: PoolToken;
    token_1: PoolToken;
    token_0_quote_rate: number;
    token_1_quote_rate: number;
    constructor(data: ExchangeTransaction);
}
declare class ContractMetadata {
    /** * Use contract decimals to format the token balance for display purposes - divide the balance by `10^{contract_decimals}`. */
    contract_decimals: number;
    /** * The string returned by the `name()` method. */
    contract_name: string;
    /** * The ticker symbol for this contract. This field is set by a developer and non-unique across a network. */
    contract_ticker_symbol: string;
    /** * Use the relevant `contract_address` to lookup prices, logos, token transfers, etc. */
    contract_address: string;
    /** * A list of supported standard ERC interfaces, eg: `ERC20` and `ERC721`. */
    supports_erc: string[];
    /** * The contract logo URL. */
    logo_url: string;
    constructor(data: ContractMetadata);
}
declare class PoolToken {
    /** * Use contract decimals to format the token balance for display purposes - divide the balance by `10^{contract_decimals}`. */
    contract_decimals: number;
    /** * The string returned by the `name()` method. */
    contract_name: string;
    /** * The ticker symbol for this contract. This field is set by a developer and non-unique across a network. */
    contract_ticker_symbol: string;
    /** * Use the relevant `contract_address` to lookup prices, logos, token transfers, etc. */
    contract_address: string;
    /** * A list of supported standard ERC interfaces, eg: `ERC20` and `ERC721`. */
    supports_erc: string[];
    /** * The contract logo URL. */
    logo_url: string;
    constructor(data: PoolToken);
}
declare class TransactionsForTokenAddressResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: ExchangeTransaction[];
    /** * Pagination metadata. */
    pagination: Pagination;
    constructor(data: TransactionsForTokenAddressResponse);
}
declare class TransactionsForExchangeResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: ExchangeTransaction[];
    /** * Pagination metadata. */
    pagination: Pagination;
    constructor(data: TransactionsForExchangeResponse);
}
declare class NetworkTransactionsResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: ExchangeTransaction[];
    /** * Pagination metadata. */
    pagination: Pagination;
    constructor(data: NetworkTransactionsResponse);
}
declare class EcosystemChartDataResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: UniswapLikeEcosystemCharts[];
    /** * Pagination metadata. */
    pagination: Pagination;
    constructor(data: EcosystemChartDataResponse);
}
declare class UniswapLikeEcosystemCharts {
    /** * The name of the DEX, eg: `uniswap_v2`. */
    dex_name: string;
    /** * The requested chain ID eg: `1`. */
    chain_id: string;
    /** * The requested quote currency eg: `USD`. */
    quote_currency: string;
    gas_token_price_quote: number;
    total_swaps_24h: number;
    total_active_pairs_7d: number;
    total_fees_24h: number;
    /** * A prettier version of the gas quote for rendering purposes. */
    pretty_gas_token_price_quote: string;
    /** * A prettier version of the 24h total fees for rendering purposes. */
    pretty_total_fees_24h: string;
    volume_chart_7d: VolumeEcosystemChart[];
    volume_chart_30d: VolumeEcosystemChart[];
    liquidity_chart_7d: LiquidityEcosystemChart[];
    liquidity_chart_30d: LiquidityEcosystemChart[];
    constructor(data: UniswapLikeEcosystemCharts);
}
declare class VolumeEcosystemChart {
    /** * The name of the DEX, eg: `uniswap_v2`. */
    dex_name: string;
    /** * The requested chain ID eg: `1`. */
    chain_id: string;
    dt: Date;
    /** * The requested quote currency eg: `USD`. */
    quote_currency: string;
    volume_quote: number;
    /** * A prettier version of the volume quote for rendering purposes. */
    pretty_volume_quote: string;
    swap_count_24: number;
    constructor(data: VolumeEcosystemChart);
}
declare class LiquidityEcosystemChart {
    /** * The name of the DEX, eg: `uniswap_v2`. */
    dex_name: string;
    /** * The requested chain ID eg: `1`. */
    chain_id: string;
    dt: Date;
    /** * The requested quote currency eg: `USD`. */
    quote_currency: string;
    liquidity_quote: number;
    /** * A prettier version of the liquidity quote for rendering purposes. */
    pretty_liquidity_quote: string;
    constructor(data: LiquidityEcosystemChart);
}
declare class HealthDataResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: HealthData[];
    /** * Pagination metadata. */
    pagination: Pagination;
    constructor(data: HealthDataResponse);
}
declare class HealthData {
    synced_block_height: number;
    synced_block_signed_at: Date;
    latest_block_height: number;
    latest_block_signed_at: Date;
    constructor(data: HealthData);
}
export interface GetPoolsQueryParamOpts {
    /** * Ending date to define a block range (YYYY-MM-DD). Omitting this parameter defaults to the current date. */
    date?: string;
    /** * Number of items per page. Omitting this parameter defaults to 100. */
    pageSize?: number;
    /** * 0-indexed page number to begin pagination. */
    pageNumber?: number;
}
export interface GetPoolsForTokenAddressQueryParamOpts {
    /** * The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`. */
    quoteCurrency?: Quote;
    /** * The DEX name eg: `uniswap_v2`. */
    dexName?: string;
    /** * Number of items per page. Omitting this parameter defaults to 100. */
    pageSize?: number;
}
export interface GetPoolsForWalletAddressQueryParamOpts {
    /** * The token contract address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically. */
    tokenAddress?: string;
    /** * The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`. */
    quoteCurrency?: Quote;
    /** * The DEX name eg: `uniswap_v2`. */
    dexName?: string;
    /** * Number of items per page. Omitting this parameter defaults to 100. */
    pageSize?: number;
}
export interface GetNetworkExchangeTokensQueryParamOpts {
    /** * Number of items per page. Omitting this parameter defaults to 100. */
    pageSize?: number;
    /** * 0-indexed page number to begin pagination. */
    pageNumber?: number;
}
export interface GetLpTokenViewQueryParamOpts {
    /** * The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`. */
    quoteCurrency?: Quote;
}
export interface GetSingleNetworkExchangeTokenQueryParamOpts {
    /** * Number of items per page. Omitting this parameter defaults to 100. */
    pageSize?: number;
    /** * 0-indexed page number to begin pagination. */
    pageNumber?: number;
}
export interface GetTransactionsForTokenAddressQueryParamOpts {
    /** * Number of items per page. Omitting this parameter defaults to 100. */
    pageSize?: number;
    /** * 0-indexed page number to begin pagination. */
    pageNumber?: number;
}
export interface GetTransactionsForExchangeQueryParamOpts {
    /** * Number of items per page. Omitting this parameter defaults to 100. */
    pageSize?: number;
    /** * 0-indexed page number to begin pagination. */
    pageNumber?: number;
}
export interface GetTransactionsForDexQueryParamOpts {
    /** * The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`. */
    quoteCurrency?: Quote;
    /** * Number of items per page. Omitting this parameter defaults to 100. */
    pageSize?: number;
    /** * 0-indexed page number to begin pagination. */
    pageNumber?: number;
}
/**
 * XYK APIs
 *
 */
export declare class XykService {
    private apiKey;
    private debug;
    private threadCount;
    private is_key_valid;
    private enableRetry;
    private source;
    private LIMIT;
    constructor(apiKey: string, debug: boolean, threadCount: number, is_key_valid: boolean, enableRetry: boolean, source: Source);
    /**
     *
     * Commonly used to get all the pools of a particular DEX. Supports most common DEXs (Uniswap, SushiSwap, etc), and returns detailed trading data (volume, liquidity, swap counts, fees, LP token prices).
     *
     * @param {string} chainName - The chain name eg: `eth-mainnet`.
     * @param {string} dexName - The DEX name eg: `uniswap_v2`.
     * @param {GetPoolsQueryParamOpts} queryParamOpts
     *   - `pageSize`: Number of items per page. Omitting this parameter defaults to 100.
     *   - `pageNumber`: 0-indexed page number to begin pagination.
     *
     */
    getPools(chainName: Chain | Chains | ChainID, dexName: string, queryParamOpts?: GetPoolsQueryParamOpts): Promise<Response<PoolResponse>>;
    /**
     *
     * Commonly used to get the corresponding supported DEX given a pool address, along with the swap fees, DEX's logo url, and factory addresses. Useful to identifying the specific DEX to which a pair address is associated.
     *
     * @param {string} chainName - The chain name eg: `eth-mainnet`.
     * @param {string} poolAddress - The requested pool address.
     *
     */
    getDexForPoolAddress(chainName: Chain | Chains | ChainID, poolAddress: string): Promise<Response<PoolToDexResponse>>;
    /**
     *
     * Commonly used to get the 7 day and 30 day time-series data (volume, liquidity, price) of a particular liquidity pool in a DEX. Useful for building time-series charts on DEX trading activity.
     *
     * @param {string} chainName - The chain name eg: `eth-mainnet`.
     * @param {string} dexName - The DEX name eg: `uniswap_v2`.
     * @param {string} poolAddress - The pool contract address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
     *
     */
    getPoolByAddress(chainName: Chain | Chains | ChainID, dexName: string, poolAddress: string): Promise<Response<PoolByAddressResponse>>;
    /**
     *
     * Commonly used to get all pools and the supported DEX for a token. Useful for building a table of top pairs across all supported DEXes that the token is trading on.
     *
     * @param {string} chainName - The chain name eg: `eth-mainnet`.
     * @param {string} tokenAddress - The token contract address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
     * @param {number} page - The requested 0-indexed page number.
     * @param {GetPoolsForTokenAddressQueryParamOpts} queryParamOpts
     *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.
     *   - `dexName`: The DEX name eg: `uniswap_v2`.
     *   - `pageSize`: Number of items per page. Omitting this parameter defaults to 100.
     *
     */
    getPoolsForTokenAddress(chainName: Chain | Chains | ChainID, tokenAddress: string, page: number, queryParamOpts?: GetPoolsForTokenAddressQueryParamOpts): Promise<Response<PoolsDexDataResponse>>;
    /**
     *
     * Commonly used to return balance of a wallet/contract address on a specific DEX.
     *
     * @param {string} chainName - The chain name eg: `eth-mainnet`.
     * @param {string} dexName - The DEX name eg: `uniswap_v2`.
     * @param {string} accountAddress - The account address.
     *
     */
    getAddressExchangeBalances(chainName: Chain | Chains | ChainID, dexName: string, accountAddress: string): Promise<Response<AddressExchangeBalancesResponse>>;
    /**
     *
     * Commonly used to get all pools and supported DEX for a wallet. Useful for building a personal DEX UI showcasing pairs and supported DEXes associated to the wallet.
     *
     * @param {string} chainName - The chain name eg: `eth-mainnet`.
     * @param {string} walletAddress - The account address.
     * @param {number} page - The requested 0-indexed page number.
     * @param {GetPoolsForWalletAddressQueryParamOpts} queryParamOpts
     *   - `tokenAddress`: The token contract address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
     *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.
     *   - `dexName`: The DEX name eg: `uniswap_v2`.
     *   - `pageSize`: Number of items per page. Omitting this parameter defaults to 100.
     *
     */
    getPoolsForWalletAddress(chainName: Chain | Chains | ChainID, walletAddress: string, page: number, queryParamOpts?: GetPoolsForWalletAddressQueryParamOpts): Promise<Response<PoolsDexDataResponse>>;
    /**
     *
     * Commonly used to retrieve all network exchange tokens for a specific DEX. Useful for building a top tokens table by total liquidity within a particular DEX.
     *
     * @param {string} chainName - The chain name eg: `eth-mainnet`.
     * @param {string} dexName - The DEX name eg: `uniswap_v2`.
     * @param {GetNetworkExchangeTokensQueryParamOpts} queryParamOpts
     *   - `pageSize`: Number of items per page. Omitting this parameter defaults to 100.
     *   - `pageNumber`: 0-indexed page number to begin pagination.
     *
     */
    getNetworkExchangeTokens(chainName: Chain | Chains | ChainID, dexName: string, queryParamOpts?: GetNetworkExchangeTokensQueryParamOpts): Promise<Response<NetworkExchangeTokensResponse>>;
    /**
     *
     * Commonly used to get a detailed view for a single liquidity pool token. Includes time series data.
     *
     * @param {string} chainName - The chain name eg: `eth-mainnet`.
     * @param {string} dexName - The DEX name eg: `uniswap_v2`.
     * @param {string} tokenAddress - The token contract address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
     * @param {GetLpTokenViewQueryParamOpts} queryParamOpts
     *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.
     *
     */
    getLpTokenView(chainName: Chain | Chains | ChainID, dexName: string, tokenAddress: string, queryParamOpts?: GetLpTokenViewQueryParamOpts): Promise<Response<NetworkExchangeTokenViewResponse>>;
    /**
     *
     * Commonly used to get all the supported DEXs available for the xy=k endpoints, along with the swap fees and factory addresses.
     *
     *
     */
    getSupportedDEXes(): Promise<Response<SupportedDexesResponse>>;
    /**
     *
     * Commonly used to get historical daily swap count for a single network exchange token.
     *
     * @param {string} chainName - The chain name eg: `eth-mainnet`.
     * @param {string} dexName - The DEX name eg: `uniswap_v2`.
     * @param {string} tokenAddress - The token contract address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
     * @param {GetSingleNetworkExchangeTokenQueryParamOpts} queryParamOpts
     *   - `pageSize`: Number of items per page. Omitting this parameter defaults to 100.
     *   - `pageNumber`: 0-indexed page number to begin pagination.
     *
     */
    getSingleNetworkExchangeToken(chainName: Chain | Chains | ChainID, dexName: string, tokenAddress: string, queryParamOpts?: GetSingleNetworkExchangeTokenQueryParamOpts): Promise<Response<SingleNetworkExchangeTokenResponse>>;
    /**
     *
     * Commonly used to get all the DEX transactions of a wallet. Useful for building tables of DEX activity segmented by wallet.
     *
     * @param {string} chainName - The chain name eg: `eth-mainnet`.
     * @param {string} dexName - The DEX name eg: `uniswap_v2`.
     * @param {string} accountAddress - The account address. Passing in an `ENS` or `RNS` resolves automatically.
     *
     */
    getTransactionsForAccountAddress(chainName: Chain | Chains | ChainID, dexName: string, accountAddress: string): Promise<Response<TransactionsForAccountAddressResponse>>;
    /**
     *
     * Commonly used to get all the transactions of a token within a particular DEX. Useful for getting a per-token view of DEX activity.
     *
     * @param {string} chainName - The chain name eg: `eth-mainnet`.
     * @param {string} dexName - The DEX name eg: `uniswap_v2`.
     * @param {string} tokenAddress - The token contract address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
     * @param {GetTransactionsForTokenAddressQueryParamOpts} queryParamOpts
     *   - `pageSize`: Number of items per page. Omitting this parameter defaults to 100.
     *   - `pageNumber`: 0-indexed page number to begin pagination.
     *
     */
    getTransactionsForTokenAddress(chainName: Chain | Chains | ChainID, dexName: string, tokenAddress: string, queryParamOpts?: GetTransactionsForTokenAddressQueryParamOpts): Promise<Response<TransactionsForTokenAddressResponse>>;
    /**
     *
     * Commonly used for getting all the transactions of a particular DEX liquidity pool. Useful for building a transactions history table for an individual pool.
     *
     * @param {string} chainName - The chain name eg: `eth-mainnet`.
     * @param {string} dexName - The DEX name eg: `uniswap_v2`.
     * @param {string} poolAddress - The pool contract address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
     * @param {GetTransactionsForExchangeQueryParamOpts} queryParamOpts
     *   - `pageSize`: Number of items per page. Omitting this parameter defaults to 100.
     *   - `pageNumber`: 0-indexed page number to begin pagination.
     *
     */
    getTransactionsForExchange(chainName: Chain | Chains | ChainID, dexName: string, poolAddress: string, queryParamOpts?: GetTransactionsForExchangeQueryParamOpts): Promise<Response<TransactionsForExchangeResponse>>;
    /**
     *
     * Commonly used to get all the the transactions for a given DEX. Useful for building DEX activity views.
     *
     * @param {string} chainName - The chain name eg: `eth-mainnet`.
     * @param {string} dexName - The DEX name eg: `uniswap_v2`.
     * @param {GetTransactionsForDexQueryParamOpts} queryParamOpts
     *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.
     *   - `pageSize`: Number of items per page. Omitting this parameter defaults to 100.
     *   - `pageNumber`: 0-indexed page number to begin pagination.
     *
     */
    getTransactionsForDex(chainName: Chain | Chains | ChainID, dexName: string, queryParamOpts?: GetTransactionsForDexQueryParamOpts): Promise<Response<NetworkTransactionsResponse>>;
    /**
     *
     * Commonly used to get a 7d and 30d time-series chart of DEX activity. Includes volume and swap count.
     *
     * @param {string} chainName - The chain name eg: `eth-mainnet`.
     * @param {string} dexName - The DEX name eg: `uniswap_v2`.
     *
     */
    getEcosystemChartData(chainName: Chain | Chains | ChainID, dexName: string): Promise<Response<EcosystemChartDataResponse>>;
    /**
     *
     * Commonly used to ping the health of xy=k endpoints to get the synced block height per chain.
     *
     * @param {string} chainName - The chain name eg: `eth-mainnet`.
     * @param {string} dexName - The DEX name eg: `uniswap_v2`.
     *
     */
    getHealthData(chainName: Chain | Chains | ChainID, dexName: string): Promise<Response<HealthDataResponse>>;
}
export {};

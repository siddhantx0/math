import { Chain, ChainID, Quote, Source } from "./CovalentClient";
import { Chains } from "../util/Chains";
declare class TokenPricesResponse {
    /** * Use contract decimals to format the token balance for display purposes - divide the balance by `10^{contract_decimals}`. */
    contract_decimals: number;
    /** * The string returned by the `name()` method. */
    contract_name: string;
    /** * The ticker symbol for this contract. This field is set by a developer and non-unique across a network. */
    contract_ticker_symbol: string;
    /** * Use the relevant `contract_address` to lookup prices, logos, token transfers, etc. */
    contract_address: string;
    /** * A list of supported standard ERC interfaces, eg: `ERC20` and `ERC721`. */
    supports_erc: string[];
    /** * The contract logo URL. */
    logo_url: string;
    update_at: Date;
    /** * The requested quote currency eg: `USD`. */
    quote_currency: string;
    /** * The contract logo URLs. */
    logo_urls: LogoUrls;
    /** * List of response items. */
    prices: Price[];
    /** * List of response items. */
    items: Price[];
    constructor(data: TokenPricesResponse);
}
declare class LogoUrls {
    /** * The token logo URL. */
    token_logo_url: string;
    /** * The protocol logo URL. */
    protocol_logo_url: string;
    /** * The chain logo URL. */
    chain_logo_url: string;
    constructor(data: LogoUrls);
}
declare class Price {
    contract_metadata: ContractMetadata;
    /** * The date of the price capture. */
    date: Date;
    /** * The price in the requested `quote-currency`. */
    price: number;
    /** * A prettier version of the price for rendering purposes. */
    pretty_price: string;
    constructor(data: Price);
}
declare class ContractMetadata {
    /** * Use contract decimals to format the token balance for display purposes - divide the balance by `10^{contract_decimals}`. */
    contract_decimals: number;
    /** * The string returned by the `name()` method. */
    contract_name: string;
    /** * The ticker symbol for this contract. This field is set by a developer and non-unique across a network. */
    contract_ticker_symbol: string;
    /** * Use the relevant `contract_address` to lookup prices, logos, token transfers, etc. */
    contract_address: string;
    /** * A list of supported standard ERC interfaces, eg: `ERC20` and `ERC721`. */
    supports_erc: string[];
    /** * The contract logo URL. */
    logo_url: string;
    constructor(data: ContractMetadata);
}
export interface GetTokenPricesQueryParamOpts {
    /** * The start day of the historical price range (YYYY-MM-DD). */
    from?: string;
    /** * The end day of the historical price range (YYYY-MM-DD). */
    to?: string;
    /** * Sort the prices in chronological ascending order. By default, it's set to `false` and returns prices in chronological descending order. */
    pricesAtAsc?: boolean;
}
/**
 * Pricing APIs
 *
 */
export declare class Response<T> {
    data: Array<T>;
    error: boolean;
    error_code: number;
    error_message: string;
}
export declare class PricingService {
    private apiKey;
    private debug;
    private threadCount;
    private is_key_valid;
    private enableRetry;
    private source;
    private LIMIT;
    constructor(apiKey: string, debug: boolean, threadCount: number, is_key_valid: boolean, enableRetry: boolean, source: Source);
    /**
     *
     * Commonly used to get historic prices of a token between date ranges. Supports native tokens.
     *
     * @param {string} chainName - The chain name eg: `eth-mainnet`.
     * @param {string} quoteCurrency - The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.
     * @param {string} contractAddress - Contract address for the token. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically. Supports multiple contract addresses separated by commas.
     * @param {GetTokenPricesQueryParamOpts} queryParamOpts
     *   - `from`: The start day of the historical price range (YYYY-MM-DD).
     *   - `to`: The end day of the historical price range (YYYY-MM-DD).
     *   - `pricesAtAsc`: Sort the prices in chronological ascending order. By default, it's set to `false` and returns prices in chronological descending order.
     *
     */
    getTokenPrices(chainName: Chain | Chains | ChainID, quoteCurrency: Quote, contractAddress: string, queryParamOpts?: GetTokenPricesQueryParamOpts): Promise<Response<TokenPricesResponse>>;
}
export {};

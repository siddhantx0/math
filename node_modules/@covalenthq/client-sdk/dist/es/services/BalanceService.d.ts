import { Chain, Quote, Response, ChainID, Source } from "./CovalentClient";
import { Chains } from "../util/Chains";
declare class BalancesResponse {
    /** * The requested address. */
    address: string;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * The requested quote currency eg: `USD`. */
    quote_currency: string;
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * List of response items. */
    items: BalanceItem[];
    constructor(data: BalancesResponse);
}
declare class BalanceItem {
    /** * Use contract decimals to format the token balance for display purposes - divide the balance by `10^{contract_decimals}`. */
    contract_decimals: number;
    /** * The string returned by the `name()` method. */
    contract_name: string;
    /** * The ticker symbol for this contract. This field is set by a developer and non-unique across a network. */
    contract_ticker_symbol: string;
    /** * Use the relevant `contract_address` to lookup prices, logos, token transfers, etc. */
    contract_address: string;
    /** * A display-friendly name for the contract. */
    contract_display_name: string;
    /** * A list of supported standard ERC interfaces, eg: `ERC20` and `ERC721`. */
    supports_erc: string[];
    /** * The contract logo URL. */
    logo_url: string;
    /** * The contract logo URLs. */
    logo_urls: LogoUrls;
    /** * The timestamp when the token was transferred. */
    last_transferred_at: Date;
    /** * Indicates if a token is the chain's native gas token, eg: ETH on Ethereum. */
    native_token: boolean;
    /** * One of `cryptocurrency`, `stablecoin`, `nft` or `dust`. */
    type: string;
    /** * Denotes whether the token is suspected spam. */
    is_spam: boolean;
    /** * The asset balance. Use `contract_decimals` to scale this balance for display purposes. */
    balance: bigint | null;
    /** * The 24h asset balance. Use `contract_decimals` to scale this balance for display purposes. */
    balance_24h: bigint | null;
    /** * The exchange rate for the requested quote currency. */
    quote_rate: number;
    /** * The 24h exchange rate for the requested quote currency. */
    quote_rate_24h: number;
    /** * The current balance converted to fiat in `quote-currency`. */
    quote: number;
    /** * The 24h balance converted to fiat in `quote-currency`. */
    quote_24h: number;
    /** * A prettier version of the quote for rendering purposes. */
    pretty_quote: string;
    /** * A prettier version of the 24h quote for rendering purposes. */
    pretty_quote_24h: string;
    /** * The protocol metadata. */
    protocol_metadata: ProtocolMetadata;
    /** * NFT-specific data. */
    nft_data: BalanceNftData[];
    constructor(data: BalanceItem);
}
declare class LogoUrls {
    /** * The token logo URL. */
    token_logo_url: string;
    /** * The protocol logo URL. */
    protocol_logo_url: string;
    /** * The chain logo URL. */
    chain_logo_url: string;
    constructor(data: LogoUrls);
}
declare class ProtocolMetadata {
    /** * The name of the protocol. */
    protocol_name: string;
    constructor(data: ProtocolMetadata);
}
declare class BalanceNftData {
    /** * The token's id. */
    token_id: bigint | null;
    /** * The count of the number of NFTs with this ID. */
    token_balance: bigint | null;
    /** * External URL for additional metadata. */
    token_url: string;
    /** * A list of supported standard ERC interfaces, eg: `ERC20` and `ERC721`. */
    supports_erc: string[];
    /** * The latest price value on chain of the token ID. */
    token_price_wei: bigint | null;
    /** * The latest quote_rate of the token ID denominated in unscaled ETH. */
    token_quote_rate_eth: string;
    /** * The address of the original owner of this NFT. */
    original_owner: string;
    external_data: NftExternalDataV1;
    /** * The current owner of this NFT. */
    owner: string;
    /** * The address of the current owner of this NFT. */
    owner_address: string;
    /** * When set to true, this NFT has been Burned. */
    burned: boolean;
    constructor(data: BalanceNftData);
}
declare class NftExternalDataV1 {
    name: string;
    description: string;
    image: string;
    image_256: string;
    image_512: string;
    image_1024: string;
    animation_url: string;
    external_url: string;
    attributes: NftCollectionAttribute[];
    owner: string;
    constructor(data: NftExternalDataV1);
}
declare class NftCollectionAttribute {
    trait_type: string;
    value: string;
    constructor(data: NftCollectionAttribute);
}
declare class PortfolioResponse {
    /** * The requested address. */
    address: string;
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested quote currency eg: `USD`. */
    quote_currency: string;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: PortfolioItem[];
    constructor(data: PortfolioResponse);
}
declare class PortfolioItem {
    /** * Use the relevant `contract_address` to lookup prices, logos, token transfers, etc. */
    contract_address: string;
    /** * Use contract decimals to format the token balance for display purposes - divide the balance by `10^{contract_decimals}`. */
    contract_decimals: number;
    /** * The string returned by the `name()` method. */
    contract_name: string;
    /** * The ticker symbol for this contract. This field is set by a developer and non-unique across a network. */
    contract_ticker_symbol: string;
    /** * The contract logo URL. */
    logo_url: string;
    holdings: HoldingItem[];
    constructor(data: PortfolioItem);
}
declare class HoldingItem {
    /** * The exchange rate for the requested quote currency. */
    quote_rate: number;
    timestamp: Date;
    close: OhlcItem;
    high: OhlcItem;
    low: OhlcItem;
    open: OhlcItem;
    constructor(data: HoldingItem);
}
declare class OhlcItem {
    /** * The asset balance. Use `contract_decimals` to scale this balance for display purposes. */
    balance: bigint | null;
    /** * The current balance converted to fiat in `quote-currency`. */
    quote: number;
    /** * A prettier version of the quote for rendering purposes. */
    pretty_quote: string;
    constructor(data: OhlcItem);
}
declare class Erc20TransfersResponse {
    /** * The requested address. */
    address: string;
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested quote currency eg: `USD`. */
    quote_currency: string;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: BlockTransactionWithContractTransfers[];
    /** * Pagination metadata. */
    pagination: Pagination;
    constructor(data: Erc20TransfersResponse);
}
declare class BlockTransactionWithContractTransfers {
    /** * The block signed timestamp in UTC. */
    block_signed_at: Date;
    /** * The height of the block. */
    block_height: number;
    /** * The hash of the block. Use it to remove transactions from re-org-ed blocks. */
    block_hash: string;
    /** * The requested transaction hash. */
    tx_hash: string;
    /** * The offset is the position of the tx in the block. */
    tx_offset: number;
    /** * Whether or not transaction is successful. */
    successful: boolean;
    /** * The address of the miner. */
    miner_address: string;
    /** * The sender's wallet address. */
    from_address: string;
    /** * The label of `from` address. */
    from_address_label: string;
    /** * The receiver's wallet address. */
    to_address: string;
    /** * The label of `to` address. */
    to_address_label: string;
    /** * The value attached to this tx. */
    value: bigint | null;
    /** * The value attached in `quote-currency` to this tx. */
    value_quote: number;
    /** * A prettier version of the quote for rendering purposes. */
    pretty_value_quote: string;
    /** * The requested chain native gas token metadata. */
    gas_metadata: ContractMetadata;
    gas_offered: number;
    /** * The gas spent for this tx. */
    gas_spent: number;
    /** * The gas price at the time of this tx. */
    gas_price: number;
    /** * The transaction's gas_price * gas_spent, denoted in wei. */
    fees_paid: bigint | null;
    /** * The gas spent in `quote-currency` denomination. */
    gas_quote: number;
    /** * A prettier version of the quote for rendering purposes. */
    pretty_gas_quote: string;
    /** * The native gas exchange rate for the requested `quote-currency`. */
    gas_quote_rate: number;
    transfers: TokenTransferItem[];
    constructor(data: BlockTransactionWithContractTransfers);
}
declare class Pagination {
    /** * True is there is another page. */
    has_more: boolean;
    /** * The requested page number. */
    page_number: number;
    /** * The requested number of items on the current page. */
    page_size: number;
    /** * The total number of items across all pages for this request. */
    total_count: number;
    constructor(data: Pagination);
}
declare class ContractMetadata {
    /** * Use contract decimals to format the token balance for display purposes - divide the balance by `10^{contract_decimals}`. */
    contract_decimals: number;
    /** * The string returned by the `name()` method. */
    contract_name: string;
    /** * The ticker symbol for this contract. This field is set by a developer and non-unique across a network. */
    contract_ticker_symbol: string;
    /** * Use the relevant `contract_address` to lookup prices, logos, token transfers, etc. */
    contract_address: string;
    /** * A list of supported standard ERC interfaces, eg: `ERC20` and `ERC721`. */
    supports_erc: string[];
    /** * The contract logo URL. */
    logo_url: string;
    constructor(data: ContractMetadata);
}
declare class Explorer {
    /** * The name of the explorer. */
    label: string;
    /** * The URL of the explorer. */
    url: string;
    constructor(data: Explorer);
}
declare class TokenTransferItem {
    /** * The block signed timestamp in UTC. */
    block_signed_at: Date;
    /** * The requested transaction hash. */
    tx_hash: string;
    /** * The sender's wallet address. */
    from_address: string;
    /** * The label of `from` address. */
    from_address_label: string;
    /** * The receiver's wallet address. */
    to_address: string;
    /** * The label of `to` address. */
    to_address_label: string;
    /** * Use contract decimals to format the token balance for display purposes - divide the balance by `10^{contract_decimals}`. */
    contract_decimals: number;
    /** * The string returned by the `name()` method. */
    contract_name: string;
    /** * The ticker symbol for this contract. This field is set by a developer and non-unique across a network. */
    contract_ticker_symbol: string;
    /** * Use the relevant `contract_address` to lookup prices, logos, token transfers, etc. */
    contract_address: string;
    /** * The contract logo URL. */
    logo_url: string;
    /** * Categorizes token transactions as either `transfer-in` or `transfer-out`, indicating whether tokens are being received or sent from an account. */
    transfer_type: string;
    /** * The delta attached to this transfer. */
    delta: bigint | null;
    /** * The asset balance. Use `contract_decimals` to scale this balance for display purposes. */
    balance: bigint | null;
    /** * The exchange rate for the requested quote currency. */
    quote_rate: number;
    /** * The current delta converted to fiat in `quote-currency`. */
    delta_quote: number;
    /** * A prettier version of the quote for rendering purposes. */
    pretty_delta_quote: string;
    /** * The current balance converted to fiat in `quote-currency`. */
    balance_quote: number;
    /** * Additional details on which transfer events were invoked. Defaults to `true`. */
    method_calls: MethodCallsForTransfers[];
    /** * The explorer links for this transaction. */
    explorers: Explorer[];
    constructor(data: TokenTransferItem);
}
declare class MethodCallsForTransfers {
    /** * The address of the sender. */
    sender_address: string;
    method: string;
    constructor(data: MethodCallsForTransfers);
}
declare class TokenHoldersResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: TokenHolder[];
    /** * Pagination metadata. */
    pagination: Pagination;
    constructor(data: TokenHoldersResponse);
}
declare class TokenHolder {
    /** * Use contract decimals to format the token balance for display purposes - divide the balance by `10^{contract_decimals}`. */
    contract_decimals: number;
    /** * The string returned by the `name()` method. */
    contract_name: string;
    /** * The ticker symbol for this contract. This field is set by a developer and non-unique across a network. */
    contract_ticker_symbol: string;
    /** * Use the relevant `contract_address` to lookup prices, logos, token transfers, etc. */
    contract_address: string;
    /** * A list of supported standard ERC interfaces, eg: `ERC20` and `ERC721`. */
    supports_erc: string[];
    /** * The contract logo URL. */
    logo_url: string;
    /** * The requested address. */
    address: string;
    /** * The asset balance. Use `contract_decimals` to scale this balance for display purposes. */
    balance: bigint | null;
    /** * Total supply of this token. */
    total_supply: bigint | null;
    /** * The height of the block. */
    block_height: number;
    constructor(data: TokenHolder);
}
declare class HistoricalBalancesResponse {
    /** * The requested address. */
    address: string;
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested quote currency eg: `USD`. */
    quote_currency: string;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: HistoricalBalanceItem[];
    constructor(data: HistoricalBalancesResponse);
}
declare class HistoricalBalanceItem {
    /** * Use contract decimals to format the token balance for display purposes - divide the balance by `10^{contract_decimals}`. */
    contract_decimals: number;
    /** * The string returned by the `name()` method. */
    contract_name: string;
    /** * The ticker symbol for this contract. This field is set by a developer and non-unique across a network. */
    contract_ticker_symbol: string;
    /** * Use the relevant `contract_address` to lookup prices, logos, token transfers, etc. */
    contract_address: string;
    /** * A list of supported standard ERC interfaces, eg: `ERC20` and `ERC721`. */
    supports_erc: string[];
    /** * The contract logo URL. */
    logo_url: string;
    /** * The height of the block. */
    block_height: number;
    /** * The block height when the token was last transferred. */
    last_transferred_block_height: number;
    contract_display_name: string;
    /** * The timestamp when the token was transferred. */
    last_transferred_at: Date;
    /** * Indicates if a token is the chain's native gas token, eg: ETH on Ethereum. */
    native_token: boolean;
    /** * One of `cryptocurrency`, `stablecoin`, `nft` or `dust`. */
    type: string;
    /** * Denotes whether the token is suspected spam. */
    is_spam: boolean;
    /** * The asset balance. Use `contract_decimals` to scale this balance for display purposes. */
    balance: bigint | null;
    /** * The exchange rate for the requested quote currency. */
    quote_rate: number;
    /** * The current balance converted to fiat in `quote-currency`. */
    quote: number;
    /** * A prettier version of the quote for rendering purposes. */
    pretty_quote: string;
    /** * The protocol metadata. */
    protocol_metadata: ProtocolMetadata;
    /** * NFT-specific data. */
    nft_data: BalanceNftData[];
    constructor(data: HistoricalBalanceItem);
}
declare class TokenBalanceNativeResponse {
    /** * The requested address. */
    address: string;
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested quote currency eg: `USD`. */
    quote_currency: string;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: NativeBalanceItem[];
    constructor(data: TokenBalanceNativeResponse);
}
declare class NativeBalanceItem {
    /** * Use contract decimals to format the token balance for display purposes - divide the balance by `10^{contract_decimals}`. */
    contract_decimals: number;
    /** * The string returned by the `name()` method. */
    contract_name: string;
    /** * The ticker symbol for this contract. This field is set by a developer and non-unique across a network. */
    contract_ticker_symbol: string;
    /** * Use the relevant `contract_address` to lookup prices, logos, token transfers, etc. */
    contract_address: string;
    /** * A list of supported standard ERC interfaces, eg: `ERC20` and `ERC721`. */
    supports_erc: string[];
    /** * The contract logo URL. */
    logo_url: string;
    /** * The height of the block. */
    block_height: number;
    /** * The asset balance. Use `contract_decimals` to scale this balance for display purposes. */
    balance: bigint | null;
    /** * The exchange rate for the requested quote currency. */
    quote_rate: number;
    /** * The current balance converted to fiat in `quote-currency`. */
    quote: number;
    /** * A prettier version of the quote for rendering purposes. */
    pretty_quote: string;
    constructor(data: NativeBalanceItem);
}
export interface GetTokenBalancesForWalletAddressQueryParamOpts {
    /** * The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`. */
    quoteCurrency?: Quote;
    /** * If `true`, NFTs will be included in the response. */
    nft?: boolean;
    /** * If `true`, only NFTs that have been cached will be included in the response. Helpful for faster response times. */
    noNftFetch?: boolean;
    /** * If `true`, the suspected spam tokens are removed. Supports `eth-mainnet` and `matic-mainnet`. */
    noSpam?: boolean;
    /** * If `true`, the response shape is limited to a list of collections and token ids, omitting metadata and asset information. Helpful for faster response times and wallets holding a large number of NFTs. */
    noNftAssetMetadata?: boolean;
}
export interface GetHistoricalPortfolioForWalletAddressQueryParamOpts {
    /** * The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`. */
    quoteCurrency?: Quote;
    /** * The number of days to return data for. Defaults to 30 days. */
    days?: number;
}
export interface GetErc20TransfersForWalletAddressQueryParamOpts {
    /** * The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`. */
    quoteCurrency?: Quote;
    /** * The requested contract address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically. */
    contractAddress?: string;
    /** * The block height to start from, defaults to `0`. */
    startingBlock?: number;
    /** * The block height to end at, defaults to current block height. */
    endingBlock?: number;
    /** * Number of items per page. Omitting this parameter defaults to 100. */
    pageSize?: number;
    /** * 0-indexed page number to begin pagination. */
    pageNumber?: number;
}
export interface GetTokenHoldersV2ForTokenAddressQueryParamOpts {
    /** * Ending block to define a block range. Omitting this parameter defaults to the latest block height. */
    blockHeight?: number | string;
    /** * Ending date to define a block range (YYYY-MM-DD). Omitting this parameter defaults to the current date. */
    date?: string;
    /** * Number of items per page. Note: Currently, only values of `100` and `1000` are supported. Omitting this parameter defaults to 100. */
    pageSize?: number;
    /** * 0-indexed page number to begin pagination. */
    pageNumber?: number;
}
export interface GetHistoricalTokenBalancesForWalletAddressQueryParamOpts {
    /** * The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`. */
    quoteCurrency?: Quote;
    /** * If `true`, NFTs will be included in the response. */
    nft?: boolean;
    /** * If `true`, only NFTs that have been cached will be included in the response. Helpful for faster response times. */
    noNftFetch?: boolean;
    /** * If `true`, the suspected spam tokens are removed. Supports `eth-mainnet` and `matic-mainnet`. */
    noSpam?: boolean;
    /** * If `true`, the response shape is limited to a list of collections and token ids, omitting metadata and asset information. Helpful for faster response times and wallets holding a large number of NFTs. */
    noNftAssetMetadata?: boolean;
    /** * Ending block to define a block range. Omitting this parameter defaults to the latest block height. */
    blockHeight?: number | string;
    /** * Ending date to define a block range (YYYY-MM-DD). Omitting this parameter defaults to the current date. */
    date?: string;
}
export interface GetNativeTokenBalanceQueryParamOpts {
    /** * The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`. */
    quoteCurrency?: Quote;
    /** * Ending block to define a block range. Omitting this parameter defaults to the latest block height. */
    blockHeight?: number | string;
}
/**
 * Balances APIs
 *
 */
export declare class BalanceService {
    private apiKey;
    private debug;
    private threadCount;
    private is_key_valid;
    private enableRetry;
    private source;
    private LIMIT;
    constructor(apiKey: string, debug: boolean, threadCount: number, is_key_valid: boolean, enableRetry: boolean, source: Source);
    /**
     *
     * Commonly used to fetch the native, fungible (ERC20), and non-fungible (ERC721 & ERC1155) tokens held by an address. Response includes spot prices and other metadata.
     *
     * @param {string} chainName - The chain name eg: `eth-mainnet`.
     * @param {string} walletAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
     * @param {GetTokenBalancesForWalletAddressQueryParamOpts} queryParamOpts
     *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.
     *   - `nft`: If `true`, NFTs will be included in the response.
     *   - `noNftFetch`: If `true`, only NFTs that have been cached will be included in the response. Helpful for faster response times.
     *   - `noSpam`: If `true`, the suspected spam tokens are removed. Supports `eth-mainnet` and `matic-mainnet`.
     *   - `noNftAssetMetadata`: If `true`, the response shape is limited to a list of collections and token ids, omitting metadata and asset information. Helpful for faster response times and wallets holding a large number of NFTs.
     *
     */
    getTokenBalancesForWalletAddress(chainName: Chain | Chains | ChainID, walletAddress: string, queryParamOpts?: GetTokenBalancesForWalletAddressQueryParamOpts): Promise<Response<BalancesResponse>>;
    /**
     *
     * Commonly used to render a daily portfolio balance for an address broken down by the token. The timeframe is user-configurable, defaults to 30 days.
     *
     * @param {string} chainName - The chain name eg: `eth-mainnet`.
     * @param {string} walletAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
     * @param {GetHistoricalPortfolioForWalletAddressQueryParamOpts} queryParamOpts
     *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.
     *   - `days`: The number of days to return data for. Defaults to 30 days.
     *
     */
    getHistoricalPortfolioForWalletAddress(chainName: Chain | Chains | ChainID, walletAddress: string, queryParamOpts?: GetHistoricalPortfolioForWalletAddressQueryParamOpts): Promise<Response<PortfolioResponse>>;
    /**
     *
     * Commonly used to render the transfer-in and transfer-out of a token along with historical prices from an address.
     *
     * @param {string} chainName - The chain name eg: `eth-mainnet`.
     * @param {string} walletAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
     * @param {GetErc20TransfersForWalletAddressQueryParamOpts} queryParamOpts
     *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.
     *   - `contractAddress`: The requested contract address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
     *   - `startingBlock`: The block height to start from, defaults to `0`.
     *   - `endingBlock`: The block height to end at, defaults to current block height.
     *   - `pageSize`: Number of items per page. Omitting this parameter defaults to 100.
     *   - `pageNumber`: 0-indexed page number to begin pagination.
     *
     */
    getErc20TransfersForWalletAddress(chainName: Chain | Chains | ChainID, walletAddress: string, queryParamOpts?: GetErc20TransfersForWalletAddressQueryParamOpts): AsyncIterable<BlockTransactionWithContractTransfers>;
    /**
     *
     * Commonly used to render the transfer-in and transfer-out of a token along with historical prices from an address.
     *
     * @param {string} chainName - The chain name eg: `eth-mainnet`.
     * @param {string} walletAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
     * @param {GetErc20TransfersForWalletAddressQueryParamOpts} queryParamOpts
     *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.
     *   - `contractAddress`: The requested contract address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
     *   - `startingBlock`: The block height to start from, defaults to `0`.
     *   - `endingBlock`: The block height to end at, defaults to current block height.
     *   - `pageSize`: Number of items per page. Omitting this parameter defaults to 100.
     *   - `pageNumber`: 0-indexed page number to begin pagination.
     *
     */
    getErc20TransfersForWalletAddressByPage(chainName: Chain | Chains | ChainID, walletAddress: string, queryParamOpts?: GetErc20TransfersForWalletAddressQueryParamOpts): Promise<Response<Erc20TransfersResponse>>;
    /**
     *
     * Commonly used to get a list of all the token holders for a specified ERC20 or ERC721 token. Returns historic token holders when block-height is set (defaults to `latest`). Useful for building pie charts of token holders.
     *
     * @param {string} chainName - The chain name eg: `eth-mainnet`.
     * @param {string} tokenAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
     * @param {GetTokenHoldersV2ForTokenAddressQueryParamOpts} queryParamOpts
     *   - `blockHeight`: Ending block to define a block range. Omitting this parameter defaults to the latest block height.
     *   - `pageSize`: Number of items per page. Note: Currently, only values of `100` and `1000` are supported. Omitting this parameter defaults to 100.
     *   - `pageNumber`: 0-indexed page number to begin pagination.
     *   - `date`: Ending date to define a block range (YYYY-MM-DD). Omitting this parameter defaults to the current date.
     *
     */
    getTokenHoldersV2ForTokenAddress(chainName: Chain | Chains | ChainID, tokenAddress: string, queryParamOpts?: GetTokenHoldersV2ForTokenAddressQueryParamOpts): AsyncIterable<TokenHolder>;
    /**
     *
     * Commonly used to get a list of all the token holders for a specified ERC20 or ERC721 token. Returns historic token holders when block-height is set (defaults to `latest`). Useful for building pie charts of token holders.
     *
     * @param {string} chainName - The chain name eg: `eth-mainnet`.
     * @param {string} tokenAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
     * @param {GetTokenHoldersV2ForTokenAddressQueryParamOpts} queryParamOpts
     *   - `blockHeight`: Ending block to define a block range. Omitting this parameter defaults to the latest block height.
     *   - `pageSize`: Number of items per page. Note: Currently, only values of `100` and `1000` are supported. Omitting this parameter defaults to 100.
     *   - `pageNumber`: 0-indexed page number to begin pagination.
     *   - `date`: Ending date to define a block range (YYYY-MM-DD). Omitting this parameter defaults to the current date.
     *
     */
    getTokenHoldersV2ForTokenAddressByPage(chainName: Chain | Chains | ChainID, tokenAddress: string, queryParamOpts?: GetTokenHoldersV2ForTokenAddressQueryParamOpts): Promise<Response<TokenHoldersResponse>>;
    /**
     *
     * Commonly used to fetch the historical native, fungible (ERC20), and non-fungible (ERC721 & ERC1155) tokens held by an address at a given block height or date. Response includes daily prices and other metadata.
     *
     * @param {string} chainName - The chain name eg: `eth-mainnet`.
     * @param {string} walletAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
     * @param {GetHistoricalTokenBalancesForWalletAddressQueryParamOpts} queryParamOpts
     *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.
     *   - `nft`: If `true`, NFTs will be included in the response.
     *   - `noNftFetch`: If `true`, only NFTs that have been cached will be included in the response. Helpful for faster response times.
     *   - `noSpam`: If `true`, the suspected spam tokens are removed. Supports `eth-mainnet` and `matic-mainnet`.
     *   - `noNftAssetMetadata`: If `true`, the response shape is limited to a list of collections and token ids, omitting metadata and asset information. Helpful for faster response times and wallets holding a large number of NFTs.
     *   - `blockHeight`: Ending block to define a block range. Omitting this parameter defaults to the latest block height.
     *   - `date`: Ending date to define a block range (YYYY-MM-DD). Omitting this parameter defaults to the current date.
     *
     */
    getHistoricalTokenBalancesForWalletAddress(chainName: Chain | Chains | ChainID, walletAddress: string, queryParamOpts?: GetHistoricalTokenBalancesForWalletAddressQueryParamOpts): Promise<Response<HistoricalBalancesResponse>>;
    /**
     *
     * @param {string} chainName - The chain name eg: `eth-mainnet`.
     * @param {string} walletAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
     * @param {GetNativeTokenBalanceQueryParamOpts} queryParamOpts
     *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.
     *   - `blockHeight`: Ending block to define a block range. Omitting this parameter defaults to the latest block height.
     *
     */
    getNativeTokenBalance(chainName: Chain | Chains | ChainID, walletAddress: string, queryParamOpts?: GetNativeTokenBalanceQueryParamOpts): Promise<Response<TokenBalanceNativeResponse>>;
}
export {};

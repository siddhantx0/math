import { Chain, Quote, Response, ChainID, Source } from "./CovalentClient";
import { Chains } from "../util/Chains";
declare class BlockResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: Block[];
    constructor(data: BlockResponse);
}
declare class Block {
    /** * The hash of the block. */
    block_hash: string;
    /** * The block signed timestamp in UTC. */
    signed_at: Date;
    /** * The block height. */
    height: number;
    /** * The parent block hash. */
    block_parent_hash: string;
    /** * Extra data written to the block. */
    extra_data: string;
    /** * The address of the miner. */
    miner_address: string;
    /** * The associated mining cost. */
    mining_cost: number;
    /** * The associated gas used. */
    gas_used: number;
    /** * The associated gas limit. */
    gas_limit: number;
    /** * The link to the related tx by block endpoint. */
    transactions_link: string;
    constructor(data: Block);
}
declare class ResolvedAddress {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: ResolvedAddressItem[];
    constructor(data: ResolvedAddress);
}
declare class ResolvedAddressItem {
    /** * The requested address. */
    address: string;
    name: string;
    constructor(data: ResolvedAddressItem);
}
declare class BlockHeightsResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: BlockHeights[];
    /** * Pagination metadata. */
    pagination: Pagination;
    constructor(data: BlockHeightsResponse);
}
declare class BlockHeights {
    /** * The hash of the block. */
    block_hash: string;
    /** * The block signed timestamp in UTC. */
    signed_at: Date;
    /** * The block height. */
    height: number;
    /** * The parent block hash. */
    block_parent_hash: string;
    /** * Extra data written to the block. */
    extra_data: string;
    /** * The address of the miner. */
    miner_address: string;
    /** * The associated mining cost. */
    mining_cost: number;
    /** * The associated gas used. */
    gas_used: number;
    /** * The associated gas limit. */
    gas_limit: number;
    /** * The link to the related tx by block endpoint. */
    transactions_link: string;
    constructor(data: BlockHeights);
}
declare class Pagination {
    /** * True is there is another page. */
    has_more: boolean;
    /** * The requested page number. */
    page_number: number;
    /** * The requested number of items on the current page. */
    page_size: number;
    /** * The total number of items across all pages for this request. */
    total_count: number;
    constructor(data: Pagination);
}
declare class GetLogsResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: GetLogsEvent[];
    constructor(data: GetLogsResponse);
}
declare class GetLogsEvent {
    /** * The block signed timestamp in UTC. */
    block_signed_at: Date;
    /** * The height of the block. */
    block_height: number;
    /** * The hash of the block. */
    block_hash: string;
    /** * The offset is the position of the tx in the block. */
    tx_offset: number;
    /** * The offset is the position of the log entry within an event log. */
    log_offset: number;
    /** * The requested transaction hash. */
    tx_hash: string;
    /** * The log topics in raw data. */
    raw_log_topics: string[];
    /** * Use contract decimals to format the token balance for display purposes - divide the balance by `10^{contract_decimals}`. */
    sender_contract_decimals: number;
    /** * The name of the sender. */
    sender_name: string;
    /** * The ticker symbol for the sender. This field is set by a developer and non-unique across a network. */
    sender_contract_ticker_symbol: string;
    /** * The address of the sender. */
    sender_address: string;
    /** * The label of the sender address. */
    sender_address_label: string;
    /** * A list of supported standard ERC interfaces, eg: `ERC20` and `ERC721`. */
    supports_erc: string[];
    /** * The contract logo URL. */
    sender_logo_url: string;
    /** * The address of the deployed UniswapV2 like factory contract for this DEX. */
    sender_factory_address: string;
    /** * The log events in raw. */
    raw_log_data: string;
    /** * The decoded item. */
    decoded: DecodedItem;
    constructor(data: GetLogsEvent);
}
declare class DecodedItem {
    name: string;
    signature: string;
    params: Param[];
    constructor(data: DecodedItem);
}
declare class Param {
    name: string;
    type: string;
    indexed: boolean;
    decoded: boolean;
    value: string;
    constructor(data: Param);
}
declare class LogEventsByAddressResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: LogEvent[];
    /** * Pagination metadata. */
    pagination: Pagination;
    constructor(data: LogEventsByAddressResponse);
}
declare class LogEvent {
    /** * The block signed timestamp in UTC. */
    block_signed_at: Date;
    /** * The height of the block. */
    block_height: number;
    /** * The offset is the position of the tx in the block. */
    tx_offset: number;
    /** * The offset is the position of the log entry within an event log. */
    log_offset: number;
    /** * The requested transaction hash. */
    tx_hash: string;
    /** * The log topics in raw data. */
    raw_log_topics: string[];
    /** * Use contract decimals to format the token balance for display purposes - divide the balance by `10^{contract_decimals}`. */
    sender_contract_decimals: number;
    /** * The name of the sender. */
    sender_name: string;
    sender_contract_ticker_symbol: string;
    /** * The address of the sender. */
    sender_address: string;
    /** * The label of the sender address. */
    sender_address_label: string;
    /** * The contract logo URL. */
    sender_logo_url: string;
    /** * A list of supported standard ERC interfaces, eg: `ERC20` and `ERC721`. */
    supports_erc: string[];
    /** * The address of the deployed UniswapV2 like factory contract for this DEX. */
    sender_factory_address: string;
    /** * The log events in raw. */
    raw_log_data: string;
    /** * The decoded item. */
    decoded: DecodedItem;
    constructor(data: LogEvent);
}
declare class LogEventsByTopicHashResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: LogEvent[];
    /** * Pagination metadata. */
    pagination: Pagination;
    constructor(data: LogEventsByTopicHashResponse);
}
declare class AllChainsResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * List of response items. */
    items: ChainItem[];
    constructor(data: AllChainsResponse);
}
declare class ChainItem {
    /** * The chain name eg: `eth-mainnet`. */
    name: string;
    /** * The requested chain ID eg: `1`. */
    chain_id: string;
    /** * True if the chain is a testnet. */
    is_testnet: boolean;
    /** * Schema name to use for direct SQL. */
    db_schema_name: string;
    /** * The chains label eg: `Ethereum Mainnet`. */
    label: string;
    /** * The category label eg: `Ethereum`. */
    category_label: string;
    /** * A svg logo url for the chain. */
    logo_url: string;
    /** * A black png logo url for the chain. */
    black_logo_url: string;
    /** * A white png logo url for the chain. */
    white_logo_url: string;
    /** * The color theme for the chain. */
    color_theme: ColorTheme;
    /** * True if the chain is an AppChain. */
    is_appchain: boolean;
    /** * The ChainItem the appchain is a part of. */
    appchain_of: ChainItem;
    constructor(data: ChainItem);
}
declare class ColorTheme {
    /** * The red color code. */
    red: number;
    /** * The green color code. */
    green: number;
    /** * The blue color code. */
    blue: number;
    /** * The alpha color code. */
    alpha: number;
    /** * The hexadecimal color code. */
    hex: string;
    /** * The color represented in css rgb() functional notation. */
    css_rgb: string;
    constructor(data: ColorTheme);
}
declare class AllChainsStatusResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * List of response items. */
    items: ChainStatusItem[];
    constructor(data: AllChainsStatusResponse);
}
declare class ChainStatusItem {
    /** * The chain name eg: `eth-mainnet`. */
    name: string;
    /** * The requested chain ID eg: `1`. */
    chain_id: string;
    /** * True if the chain is a testnet. */
    is_testnet: boolean;
    /** * A svg logo url for the chain. */
    logo_url: string;
    /** * A black png logo url for the chain. */
    black_logo_url: string;
    /** * A white png logo url for the chain. */
    white_logo_url: string;
    /** * True if the chain is an AppChain. */
    is_appchain: boolean;
    /** * The height of the lastest block available. */
    synced_block_height: number;
    /** * The signed timestamp of lastest block available. */
    synced_blocked_signed_at: Date;
    /** * True if the chain has data and ready for querying. */
    has_data: boolean;
    constructor(data: ChainStatusItem);
}
declare class ChainActivityResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested address. */
    address: string;
    /** * List of response items. */
    items: ChainActivityEvent[];
    constructor(data: ChainActivityResponse);
}
declare class ChainActivityEvent extends ChainItem {
    /** * The timestamp when the address was last seen on the chain. */
    last_seen_at: Date;
    constructor(data: ChainActivityEvent);
}
declare class GasPricesResponse {
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * The requested quote currency eg: `USD`. */
    quote_currency: string;
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested event type. */
    event_type: string;
    /** * The exchange rate for the requested quote currency. */
    gas_quote_rate: number;
    /** * The lowest gas fee for the latest block height. */
    base_fee: bigint | null;
    /** * List of response items. */
    items: PriceItem[];
    constructor(data: GasPricesResponse);
}
declare class PriceItem {
    /** * The average gas price, in WEI, for the time interval. */
    gas_price: string;
    /** * The average gas spent for the time interval. */
    gas_spent: string;
    /** * The average gas spent in `quote-currency` denomination for the time interval. */
    gas_quote: number;
    /** * Other fees, when applicable. For example: OP chain L1 fees. */
    other_fees: OtherFees;
    /** * The sum of the L1 and L2 gas spent, in quote-currency, for the specified time interval. */
    total_gas_quote: number;
    /** * A prettier version of the total average gas spent, in quote-currency, for the specified time interval, for rendering purposes. */
    pretty_total_gas_quote: string;
    /** * The specified time interval. */
    interval: string;
    constructor(data: PriceItem);
}
declare class OtherFees {
    /** * The calculated L1 gas spent, when applicable, in quote-currency, for the specified time interval. */
    l1_gas_quote: number;
    constructor(data: OtherFees);
}
export interface GetBlockHeightsQueryParamOpts {
    /** * Number of items per page. Omitting this parameter defaults to 100. */
    pageSize?: number;
    /** * 0-indexed page number to begin pagination. */
    pageNumber?: number;
}
export interface GetLogsQueryParamOpts {
    /** * The first block to retrieve log events with. Accepts decimals, hexadecimals, or the strings `earliest` and `latest`. */
    startingBlock?: number;
    /** * The last block to retrieve log events with. Accepts decimals, hexadecimals, or the strings `earliest` and `latest`. */
    endingBlock?: string;
    /** * The address of the log events sender contract. */
    address?: string;
    /** * The topic hash(es) to retrieve logs with. */
    topics?: string;
    /** * The block hash to retrieve logs for. */
    blockHash?: string;
    /** * Omit decoded log events. */
    skipDecode?: boolean;
}
export interface GetLogEventsByAddressQueryParamOpts {
    /** * The first block to retrieve log events with. Accepts decimals, hexadecimals, or the strings `earliest` and `latest`. */
    startingBlock?: number;
    /** * The last block to retrieve log events with. Accepts decimals, hexadecimals, or the strings `earliest` and `latest`. */
    endingBlock?: string;
    /** * Number of items per page. Omitting this parameter defaults to 100. */
    pageSize?: number;
    /** * 0-indexed page number to begin pagination. */
    pageNumber?: number;
}
export interface GetLogEventsByTopicHashQueryParamOpts {
    /** * The first block to retrieve log events with. Accepts decimals, hexadecimals, or the strings `earliest` and `latest`. */
    startingBlock?: number;
    /** * The last block to retrieve log events with. Accepts decimals, hexadecimals, or the strings `earliest` and `latest`. */
    endingBlock?: string;
    /** * Additional topic hash(es) to filter on - padded & unpadded address fields are supported. Separate multiple topics with a comma. */
    secondaryTopics?: string;
    /** * Number of items per page. Omitting this parameter defaults to 100. */
    pageSize?: number;
    /** * 0-indexed page number to begin pagination. */
    pageNumber?: number;
}
export interface GetAddressActivityQueryParamOpts {
    /** * Set to true to include testnets with activity in the response. By default, it's set to `false` and only returns mainnet activity. */
    testnets?: boolean;
}
export interface GetGasPricesQueryParamOpts {
    /** * The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`. */
    quoteCurrency?: Quote;
}
/**
 * Class A - Base
 *
 */
export declare class BaseService {
    private apiKey;
    private debug;
    private threadCount;
    private is_key_valid;
    private enableRetry;
    private source;
    private LIMIT;
    constructor(apiKey: string, debug: boolean, threadCount: number, is_key_valid: boolean, enableRetry: boolean, source: Source);
    /**
     *
     * Commonly used to fetch and render a single block for a block explorer.
     *
     * @param {string} chainName - The chain name eg: `eth-mainnet`.
     * @param {string} blockHeight - The block height or `latest` for the latest block available.
     *
     */
    getBlock(chainName: Chain | Chains | ChainID, blockHeight: string): Promise<Response<BlockResponse>>;
    /**
     *
     * Commonly used to resolve ENS, RNS and Unstoppable Domains addresses.
     *
     * @param {string} chainName - The chain name eg: `eth-mainnet`.
     * @param {string} walletAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
     *
     */
    getResolvedAddress(chainName: Chain | Chains | ChainID, walletAddress: string): Promise<Response<ResolvedAddress>>;
    /**
     *
     * Commonly used to get all the block heights within a particular date range. Useful for rendering a display where you sort blocks by day.
     *
     * @param {string} chainName - The chain name eg: `eth-mainnet`.
     * @param {string} startDate - The start date in YYYY-MM-DD format.
     * @param {string} endDate - The end date in YYYY-MM-DD format.
     * @param {GetBlockHeightsQueryParamOpts} queryParamOpts
     *   - `pageSize`: Number of items per page. Omitting this parameter defaults to 100.
     *   - `pageNumber`: 0-indexed page number to begin pagination.
     *
     */
    getBlockHeights(chainName: Chain | Chains | ChainID, startDate: string, endDate: string, queryParamOpts?: GetBlockHeightsQueryParamOpts): AsyncIterable<BlockHeights>;
    /**
     *
     * Commonly used to get all the block heights within a particular date range. Useful for rendering a display where you sort blocks by day.
     *
     * @param {string} chainName - The chain name eg: `eth-mainnet`.
     * @param {string} startDate - The start date in YYYY-MM-DD format.
     * @param {string} endDate - The end date in YYYY-MM-DD format.
     * @param {GetBlockHeightsQueryParamOpts} queryParamOpts
     *   - `pageSize`: Number of items per page. Omitting this parameter defaults to 100.
     *   - `pageNumber`: 0-indexed page number to begin pagination.
     *
     */
    getBlockHeightsByPage(chainName: Chain | Chains | ChainID, startDate: string, endDate: string, queryParamOpts?: GetBlockHeightsQueryParamOpts): Promise<Response<BlockHeightsResponse>>;
    /**
     *
     * Commonly used to get all the event logs of the latest block, or for a range of blocks. Includes sender contract metadata as well as decoded logs.
     *
     * @param {string} chainName - The chain name eg: `eth-mainnet`.
     * @param {GetLogsQueryParamOpts} queryParamOpts
     *   - `startingBlock`: The first block to retrieve log events with. Accepts decimals, hexadecimals, or the strings `earliest` and `latest`.
     *   - `endingBlock`: The last block to retrieve log events with. Accepts decimals, hexadecimals, or the strings `earliest` and `latest`.
     *   - `address`: The address of the log events sender contract.
     *   - `topics`: The topic hash(es) to retrieve logs with.
     *   - `blockHash`: The block hash to retrieve logs for.
     *   - `skipDecode`: Omit decoded log events.
     *
     */
    getLogs(chainName: Chain | Chains | ChainID, queryParamOpts?: GetLogsQueryParamOpts): Promise<Response<GetLogsResponse>>;
    /**
     *
     * Commonly used to get all the event logs emitted from a particular contract address. Useful for building dashboards that examine on-chain interactions.
     *
     * @param {string} chainName - The chain name eg: `eth-mainnet`.
     * @param {string} contractAddress - The requested contract address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
     * @param {GetLogEventsByAddressQueryParamOpts} queryParamOpts
     *   - `startingBlock`: The first block to retrieve log events with. Accepts decimals, hexadecimals, or the strings `earliest` and `latest`.
     *   - `endingBlock`: The last block to retrieve log events with. Accepts decimals, hexadecimals, or the strings `earliest` and `latest`.
     *   - `pageSize`: Number of items per page. Omitting this parameter defaults to 100.
     *   - `pageNumber`: 0-indexed page number to begin pagination.
     *
     */
    getLogEventsByAddress(chainName: Chain | Chains | ChainID, contractAddress: string, queryParamOpts?: GetLogEventsByAddressQueryParamOpts): AsyncIterable<LogEvent>;
    /**
     *
     * Commonly used to get all the event logs emitted from a particular contract address. Useful for building dashboards that examine on-chain interactions.
     *
     * @param {string} chainName - The chain name eg: `eth-mainnet`.
     * @param {string} contractAddress - The requested contract address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
     * @param {GetLogEventsByAddressQueryParamOpts} queryParamOpts
     *   - `startingBlock`: The first block to retrieve log events with. Accepts decimals, hexadecimals, or the strings `earliest` and `latest`.
     *   - `endingBlock`: The last block to retrieve log events with. Accepts decimals, hexadecimals, or the strings `earliest` and `latest`.
     *   - `pageSize`: Number of items per page. Omitting this parameter defaults to 100.
     *   - `pageNumber`: 0-indexed page number to begin pagination.
     *
     */
    getLogEventsByAddressByPage(chainName: Chain | Chains | ChainID, contractAddress: string, queryParamOpts?: GetLogEventsByAddressQueryParamOpts): Promise<Response<LogEventsByAddressResponse>>;
    /**
     *
     * Commonly used to get all event logs of the same topic hash across all contracts within a particular chain. Useful for cross-sectional analysis of event logs that are emitted on-chain.
     *
     * @param {string} chainName - The chain name eg: `eth-mainnet`.
     * @param {string} topicHash - The endpoint will return event logs that contain this topic hash.
     * @param {GetLogEventsByTopicHashQueryParamOpts} queryParamOpts
     *   - `startingBlock`: The first block to retrieve log events with. Accepts decimals, hexadecimals, or the strings `earliest` and `latest`.
     *   - `endingBlock`: The last block to retrieve log events with. Accepts decimals, hexadecimals, or the strings `earliest` and `latest`.
     *   - `secondaryTopics`: Additional topic hash(es) to filter on - padded & unpadded address fields are supported. Separate multiple topics with a comma.
     *   - `pageSize`: Number of items per page. Omitting this parameter defaults to 100.
     *   - `pageNumber`: 0-indexed page number to begin pagination.
     *
     */
    getLogEventsByTopicHash(chainName: Chain | Chains | ChainID, topicHash: string, queryParamOpts?: GetLogEventsByTopicHashQueryParamOpts): AsyncIterable<LogEvent>;
    /**
     *
     * Commonly used to get all event logs of the same topic hash across all contracts within a particular chain. Useful for cross-sectional analysis of event logs that are emitted on-chain.
     *
     * @param {string} chainName - The chain name eg: `eth-mainnet`.
     * @param {string} topicHash - The endpoint will return event logs that contain this topic hash.
     * @param {GetLogEventsByTopicHashQueryParamOpts} queryParamOpts
     *   - `startingBlock`: The first block to retrieve log events with. Accepts decimals, hexadecimals, or the strings `earliest` and `latest`.
     *   - `endingBlock`: The last block to retrieve log events with. Accepts decimals, hexadecimals, or the strings `earliest` and `latest`.
     *   - `secondaryTopics`: Additional topic hash(es) to filter on - padded & unpadded address fields are supported. Separate multiple topics with a comma.
     *   - `pageSize`: Number of items per page. Omitting this parameter defaults to 100.
     *   - `pageNumber`: 0-indexed page number to begin pagination.
     *
     */
    getLogEventsByTopicHashByPage(chainName: Chain | Chains | ChainID, topicHash: string, queryParamOpts?: GetLogEventsByTopicHashQueryParamOpts): Promise<Response<LogEventsByTopicHashResponse>>;
    /**
     *
     * Commonly used to build internal dashboards for all supported chains on Covalent.
     *
     *
     */
    getAllChains(): Promise<Response<AllChainsResponse>>;
    /**
     *
     * Commonly used to build internal status dashboards of all supported chains.
     *
     *
     */
    getAllChainStatus(): Promise<Response<AllChainsStatusResponse>>;
    /**
     *
     * Commonly used to locate chains which an address is active on with a single API call.
     *
     * @param {string} walletAddress - The requested wallet address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
     * @param {GetAddressActivityQueryParamOpts} queryParamOpts
     *   - `testnets`: Set to true to include testnets with activity in the response. By default, it's set to `false` and only returns mainnet activity.
     *
     */
    getAddressActivity(walletAddress: string, queryParamOpts?: GetAddressActivityQueryParamOpts): Promise<Response<ChainActivityResponse>>;
    /**
     *
     * @param {string} chainName - The chain name eg: `eth-mainnet`.
     * @param {string} eventType - The desired event type to retrieve gas prices for. Supports `erc20` transfer events, `uniswapv3` swap events and `nativetokens` transfers.
     * @param {GetGasPricesQueryParamOpts} queryParamOpts
     *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.
     *
     */
    getGasPrices(chainName: Chain | Chains | ChainID, eventType: string, queryParamOpts?: GetGasPricesQueryParamOpts): Promise<Response<GasPricesResponse>>;
}
export {};

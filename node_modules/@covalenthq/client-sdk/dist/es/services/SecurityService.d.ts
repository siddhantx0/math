import { Chain, Response, ChainID, Source } from "./CovalentClient";
import { Chains } from "../util/Chains";
declare class ApprovalsResponse {
    /** * The requested address. */
    address: string;
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested quote currency eg: `USD`. */
    quote_currency: string;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: TokensApprovalItem[];
    constructor(data: ApprovalsResponse);
}
declare class TokensApprovalItem {
    /** * The address for the token that has approvals. */
    token_address: string;
    /** * The name for the token that has approvals. */
    token_address_label: string;
    /** * The ticker symbol for this contract. This field is set by a developer and non-unique across a network. */
    ticker_symbol: string;
    /** * Use contract decimals to format the token balance for display purposes - divide the balance by `10^{contract_decimals}`. */
    contract_decimals: number;
    /** * The contract logo URL. */
    logo_url: string;
    /** * The exchange rate for the requested quote currency. */
    quote_rate: number;
    /** * Wallet balance of the token. */
    balance: bigint | null;
    /** * Value of the wallet balance of the token. */
    balance_quote: number;
    /** * A prettier version of the quote for rendering purposes. */
    pretty_balance_quote: string;
    /** * Total amount at risk across all spenders. */
    value_at_risk: string;
    /** * Value of total amount at risk across all spenders. */
    value_at_risk_quote: number;
    /** * A prettier version of the quote for rendering purposes. */
    pretty_value_at_risk_quote: string;
    /** * Contracts with non-zero approvals for this token. */
    spenders: TokenSpenderItem[];
    constructor(data: TokensApprovalItem);
}
declare class TokenSpenderItem {
    /** * The height of the block. */
    block_height: number;
    /** * The offset is the position of the tx in the block. */
    tx_offset: number;
    /** * The offset is the position of the log entry within an event log." */
    log_offset: number;
    /** * The block signed timestamp in UTC. */
    block_signed_at: Date;
    /** * Most recent transaction that updated approval amounts for the token. */
    tx_hash: string;
    /** * Address of the contract with approval for the token. */
    spender_address: string;
    /** * Name of the contract with approval for the token. */
    spender_address_label: string;
    /** * Remaining number of tokens granted to the spender by the approval. */
    allowance: string;
    /** * Value of the remaining allowance specified by the approval. */
    allowance_quote: number;
    /** * A prettier version of the quote for rendering purposes. */
    pretty_allowance_quote: string;
    /** * Amount at risk for spender. */
    value_at_risk: string;
    /** * Value of amount at risk for spender. */
    value_at_risk_quote: number;
    /** * A prettier version of the quote for rendering purposes. */
    pretty_value_at_risk_quote: string;
    risk_factor: string;
    constructor(data: TokenSpenderItem);
}
declare class NftApprovalsResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * The requested address. */
    address: string;
    /** * List of response items. */
    items: NftApprovalsItem[];
    constructor(data: NftApprovalsResponse);
}
declare class NftApprovalsItem {
    /** * Use the relevant `contract_address` to lookup prices, logos, token transfers, etc. */
    contract_address: string;
    /** * The label of the contract address. */
    contract_address_label: string;
    /** * The ticker symbol for this contract. This field is set by a developer and non-unique across a network. */
    contract_ticker_symbol: string;
    /** * List of asset balances held by the user. */
    token_balances: NftApprovalBalance[];
    /** * Contracts with non-zero approvals for this token. */
    spenders: NftApprovalSpender[];
    constructor(data: NftApprovalsItem);
}
declare class NftApprovalBalance {
    /** * The token's id. */
    token_id: bigint | null;
    /** * The NFT's token balance. */
    token_balance: bigint | null;
    constructor(data: NftApprovalBalance);
}
declare class NftApprovalSpender {
    /** * The height of the block. */
    block_height: number;
    /** * The offset is the position of the tx in the block. */
    tx_offset: number;
    /** * The offset is the position of the log entry within an event log." */
    log_offset: number;
    /** * The block signed timestamp in UTC. */
    block_signed_at: Date;
    /** * Most recent transaction that updated approval amounts for the token. */
    tx_hash: string;
    /** * Address of the contract with approval for the token. */
    spender_address: string;
    /** * Name of the contract with approval for the token. */
    spender_address_label: string;
    /** * The token ids approved. */
    token_ids_approved: string;
    /** * Remaining number of tokens granted to the spender by the approval. */
    allowance: string;
    constructor(data: NftApprovalSpender);
}
/**
 * Approvals API
 *
 */
export declare class SecurityService {
    private apiKey;
    private debug;
    private threadCount;
    private is_key_valid;
    private enableRetry;
    private source;
    private LIMIT;
    constructor(apiKey: string, debug: boolean, threadCount: number, is_key_valid: boolean, enableRetry: boolean, source: Source);
    /**
     *
     * Commonly used to get a list of approvals across all token contracts categorized by spenders for a walletâ€™s assets.
     *
     * @param {string} chainName - The chain name eg: `eth-mainnet`.
     * @param {string} walletAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
     *
     */
    getApprovals(chainName: Chain | Chains | ChainID, walletAddress: string): Promise<Response<ApprovalsResponse>>;
    /**
     *
     * @param {string} chainName - The chain name eg: `eth-mainnet`.
     * @param {string} walletAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
     
     *
     */
    getNftApprovals(chainName: Chain | Chains | ChainID, walletAddress: string): Promise<Response<NftApprovalsResponse>>;
}
export {};

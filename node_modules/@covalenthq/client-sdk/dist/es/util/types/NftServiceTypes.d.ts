import { LogEvent, NftData, Pagination } from "./GenericTypes";
export interface ChainCollectionResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: ChainCollectionItem[];
    /** * Pagination metadata. */
    pagination: Pagination;
}
export interface ChainCollectionItem {
    /** * Use the relevant `contract_address` to lookup prices, logos, token transfers, etc. */
    contract_address: string;
    /** * The string returned by the `name()` method. */
    contract_name: string;
    /** * Denotes whether the token is suspected spam. Supports `eth-mainnet` and `matic-mainnet`. */
    is_spam: boolean;
    token_total_supply: number;
    cached_metadata_count: number;
    cached_asset_count: number;
    last_scraped_at: Date;
}
export interface NftAddressBalanceNftResponse {
    /** * The requested address. */
    address: string;
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * List of response items. */
    items: NftTokenContractBalanceItem[];
}
export interface NftTokenContractBalanceItem {
    /** * The string returned by the `name()` method. */
    contract_name: string;
    /** * The ticker symbol for this contract. This field is set by a developer and non-unique across a network. */
    contract_ticker_symbol: string;
    /** * Use the relevant `contract_address` to lookup prices, logos, token transfers, etc. */
    contract_address: string;
    /** * A list of supported standard ERC interfaces, eg: `ERC20` and `ERC721`. */
    supports_erc: string[];
    /** * Denotes whether the token is suspected spam. Supports `eth-mainnet` and `matic-mainnet`. */
    is_spam: boolean;
    last_transfered_at: Date;
    /** * The asset balance. Use `contract_decimals` to scale this balance for display purposes. */
    balance: bigint | null;
    balance_24h: string;
    type: string;
    /** * The current floor price converted to fiat in `quote-currency`. The floor price is determined by the last minimum sale price within the last 30 days across all the supported markets where the collection is sold on. */
    floor_price_quote: number;
    /** * A prettier version of the floor price quote for rendering purposes. */
    pretty_floor_price_quote: string;
    /** * The current floor price in native currency. The floor price is determined by the last minimum sale price within the last 30 days across all the supported markets where the collection is sold on. */
    floor_price_native_quote: number;
    nft_data: NftData[];
}
export interface NftMetadataResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * List of response items. */
    items: NftTokenContract[];
    /** * Pagination metadata. */
    pagination: Pagination;
}
export interface NftTokenContract {
    /** * The string returned by the `name()` method. */
    contract_name: string;
    /** * The ticker symbol for this contract. This field is set by a developer and non-unique across a network. */
    contract_ticker_symbol: string;
    /** * Use the relevant `contract_address` to lookup prices, logos, token transfers, etc. */
    contract_address: string;
    /** * Denotes whether the token is suspected spam. Supports `eth-mainnet` and `matic-mainnet`. */
    is_spam: boolean;
    type: string;
    nft_data: NftData;
}
export interface NftTransactionsResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: NftTransaction[];
}
export interface NftTransaction {
    /** * Use contract decimals to format the token balance for display purposes - divide the balance by `10^{contract_decimals}`. */
    contract_decimals: number;
    /** * The string returned by the `name()` method. */
    contract_name: string;
    /** * The ticker symbol for this contract. This field is set by a developer and non-unique across a network. */
    contract_ticker_symbol: string;
    /** * The contract logo URL. */
    logo_url: string;
    /** * Use the relevant `contract_address` to lookup prices, logos, token transfers, etc. */
    contract_address: string;
    /** * A list of supported standard ERC interfaces, eg: `ERC20` and `ERC721`. */
    supports_erc: string[];
    nft_transactions: NftTransactionItem[];
    /** * Denotes whether the token is suspected spam. Supports `eth-mainnet` and `matic-mainnet`. */
    is_spam: boolean;
}
export interface NftTransactionItem {
    /** * The block signed timestamp in UTC. */
    block_signed_at: Date;
    /** * The height of the block. */
    block_height: number;
    /** * The requested transaction hash. */
    tx_hash: string;
    /** * The offset is the position of the tx in the block. */
    tx_offset: number;
    /** * Whether or not transaction is successful. */
    successful: boolean;
    /** * The sender's wallet address. */
    from_address: string;
    /** * The label of `from` address. */
    from_address_label: string;
    /** * The receiver's wallet address. */
    to_address: string;
    /** * The label of `to` address. */
    to_address_label: string;
    /** * The value attached to this tx. */
    value: bigint | null;
    /** * The value attached in `quote-currency` to this tx. */
    value_quote: number;
    /** * A prettier version of the quote for rendering purposes. */
    pretty_value_quote: string;
    gas_offered: number;
    /** * The gas spent for this tx. */
    gas_spent: number;
    /** * The gas price at the time of this tx. */
    gas_price: number;
    /** * The total transaction fees (gas_price * gas_spent) paid for this tx, denoted in wei. */
    fees_paid: bigint | null;
    /** * The gas spent in `quote-currency` denomination. */
    gas_quote: number;
    /** * A prettier version of the quote for rendering purposes. */
    pretty_gas_quote: string;
    gas_quote_rate: number;
    /** * The log events. */
    log_events: LogEvent[];
}
export interface NftCollectionTraitsResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * List of response items. */
    items: NftTrait[];
}
export interface NftTrait {
    name: string;
}
export interface NftCollectionAttributesForTraitResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * List of response items. */
    items: NftSummaryAttribute[];
}
export interface NftSummaryAttribute {
    trait_type: string;
    values: NftAttribute[];
    unique_values: number;
}
export interface NftAttribute {
    value: string;
    count: number;
}
export interface NftCollectionTraitSummaryResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * List of response items. */
    items: NftTraitSummary[];
}
export interface NftTraitSummary {
    /** * Trait name */
    name: string;
    /** * Type of the value of the trait. */
    value_type: string;
    /** * Populated for `numeric` traits. */
    value_numeric: NftTraitNumeric;
    /** * Populated for `string` traits. */
    value_string: NftTraitString;
    attributes: NftSummaryAttribute[];
}
export interface NftTraitNumeric {
    min: number;
    max: number;
}
export interface NftTraitString {
    /** * String value */
    value: string;
    /** * Number of distinct tokens that have this trait value. */
    token_count: number;
    /** * Percentage of tokens in the collection that have this trait. */
    trait_percentage: number;
}
export interface NftOwnershipForCollectionResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested address. */
    address: string;
    /** * The requested collection. */
    collection: string;
    /** * Denotes whether the token is suspected spam. Supports `eth-mainnet` and `matic-mainnet`. */
    is_spam: boolean;
    /** * List of response items. */
    items: NftOwnershipForCollectionItem[];
}
export interface NftOwnershipForCollectionItem {
    /** * The string returned by the `name()` method. */
    contract_name: string;
    /** * The ticker symbol for this contract. This field is set by a developer and non-unique across a network. */
    contract_ticker_symbol: string;
    /** * Use the relevant `contract_address` to lookup prices, logos, token transfers, etc. */
    contract_address: string;
    /** * The token's id. */
    token_id: bigint | null;
    /** * A list of supported standard ERC interfaces, eg: `ERC20` and `ERC721`. */
    supports_erc: string[];
    last_transfered_at: Date;
    /** * Nft balance. */
    balance: bigint | null;
    balance_24h: string;
    type: string;
    nft_data: NftData;
}
export interface NftMarketSaleCountResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested address. */
    address: string;
    /** * The requested quote currency eg: `USD`. */
    quote_currency: string;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * List of response items. */
    items: MarketSaleCountItem[];
}
export interface MarketSaleCountItem {
    /** * The timestamp of the date of sale. */
    date: Date;
    /** * The total amount of sales for the current day. */
    sale_count: number;
}
export interface NftMarketVolumeResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested address. */
    address: string;
    /** * The requested quote currency eg: `USD`. */
    quote_currency: string;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * List of response items. */
    items: MarketVolumeItem[];
}
export interface MarketVolumeItem {
    /** * The timestamp of the date of sale. */
    date: Date;
    /** * The ticker symbol for the native currency. */
    native_ticker_symbol: string;
    /** * The contract name of the native currency. */
    native_name: string;
    /** * The current volume converted to fiat in `quote-currency`. */
    volume_quote: number;
    /** * The current volume in native currency. */
    volume_native_quote: number;
    /** * A prettier version of the volume quote for rendering purposes. */
    pretty_volume_quote: string;
}
export interface NftMarketFloorPriceResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested address. */
    address: string;
    /** * The requested quote currency eg: `USD`. */
    quote_currency: string;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * List of response items. */
    items: MarketFloorPriceItem[];
}
export interface MarketFloorPriceItem {
    /** * The timestamp of the date of sale. */
    date: Date;
    /** * The ticker symbol for the native currency. */
    native_ticker_symbol: string;
    /** * The contract name of the native currency. */
    native_name: string;
    /** * The current floor price in native currency. */
    floor_price_native_quote: number;
    /** * The current floor price converted to fiat in `quote-currency`. */
    floor_price_quote: number;
    /** * A prettier version of the floor price quote for rendering purposes. */
    pretty_floor_price_quote: string;
}

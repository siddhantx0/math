export interface Pagination {
    /** * True is there is another page. */
    has_more: boolean;
    /** * The requested page number. */
    page_number: number;
    /** * The requested number of items on the current page. */
    page_size: number;
    /** * The total number of items across all pages for this request. */
    total_count: number;
}
export interface NftCollectionAttribute {
    trait_type: string;
    value: string;
}
export interface NftData {
    /** * The token's id. */
    token_id: bigint | null;
    token_url: string;
    /** * The original minter. */
    original_owner: string;
    /** * The current holder of this NFT. */
    current_owner: string;
    external_data: NftExternalData;
    /** * If `true`, the asset data is available from the Covalent CDN. */
    asset_cached: boolean;
    /** * If `true`, the image data is available from the Covalent CDN. */
    image_cached: boolean;
}
export interface NftExternalData {
    name: string;
    description: string;
    asset_url: string;
    asset_file_extension: string;
    asset_mime_type: string;
    asset_size_bytes: string;
    image: string;
    image_256: string;
    image_512: string;
    image_1024: string;
    animation_url: string;
    external_url: string;
    attributes: NftCollectionAttribute[];
}
export interface DecodedItem {
    name: string;
    signature: string;
    params: Param[];
}
export interface Param {
    name: string;
    type: string;
    indexed: boolean;
    decoded: boolean;
    value: string;
}
export interface LogEvent {
    /** * The block signed timestamp in UTC. */
    block_signed_at: Date;
    /** * The height of the block. */
    block_height: number;
    /** * The offset is the position of the tx in the block. */
    tx_offset: number;
    /** * The offset is the position of the log entry within an event log. */
    log_offset: number;
    /** * The requested transaction hash. */
    tx_hash: string;
    /** * The log topics in raw data. */
    raw_log_topics: string[];
    /** * Use contract decimals to format the token balance for display purposes - divide the balance by `10^{contract_decimals}`. */
    sender_contract_decimals: number;
    /** * The name of the sender. */
    sender_name: string;
    sender_contract_ticker_symbol: string;
    /** * The address of the sender. */
    sender_address: string;
    /** * The label of the sender address. */
    sender_address_label: string;
    /** * The contract logo URL. */
    sender_logo_url: string;
    /** * A list of supported standard ERC interfaces, eg: `ERC20` and `ERC721`. */
    supports_erc: string[];
    /** * The address of the deployed UniswapV2 like factory contract for this DEX. */
    sender_factory_address: string;
    /** * The log events in raw. */
    raw_log_data: string;
    /** * The decoded item. */
    decoded: DecodedItem;
}
export interface ContractMetadata {
    /** * Use contract decimals to format the token balance for display purposes - divide the balance by `10^{contract_decimals}`. */
    contract_decimals: number;
    /** * The string returned by the `name()` method. */
    contract_name: string;
    /** * The ticker symbol for this contract. This field is set by a developer and non-unique across a network. */
    contract_ticker_symbol: string;
    /** * Use the relevant `contract_address` to lookup prices, logos, token transfers, etc. */
    contract_address: string;
    /** * A list of supported standard ERC interfaces, eg: `ERC20` and `ERC721`. */
    supports_erc: string[];
    /** * The contract logo URL. */
    logo_url: string;
}
export interface Explorer {
    /** * The name of the explorer. */
    label: string;
    /** * The URL of the explorer. */
    url: string;
}
export interface LogoUrls {
    /** * The token logo URL. */
    token_logo_url: string;
    /** * The protocol logo URL. */
    protocol_logo_url: string;
    /** * The chain logo URL. */
    chain_logo_url: string;
}

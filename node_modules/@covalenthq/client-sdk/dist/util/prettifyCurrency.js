const LESS_THAN_ZERO = "0.01";
const ZERO = "0.00";
const currencyMap = new Map([
    ["USD", "$"],
    ["CAD", "CA$"],
    ["EUR", "€"],
    ["SGD", "S$"],
    ["INR", "₹"],
    ["JPY", "¥"],
    ["VND", "₫"],
    ["CNY", "CN¥"],
    ["KRW", "₩"],
    ["RUB", "₽"],
    ["TRY", "₺"],
    ["NGN", "₦"],
    ["ARS", "ARS"],
    ["AUD", "A$"],
    ["CHF", "CHF"],
    ["GBP", "£"],
]);
export const prettifyCurrency = (value, decimals = 2, currency = "USD", ignoreSmallValue = false, ignoreMinus = true, ignoreZero = false) => {
    if (typeof value === "string") {
        value = Number(value);
    }
    let minus = "";
    let currencySuffix = "";
    // pass ignoreMinus false to get the negative number for currency formatter
    if (!ignoreMinus && value < 0) {
        value = Math.abs(value);
        minus = "-";
    }
    if (value === 0 || !value) {
        // if value is 0, pass ignoreZero true to get this string "<$0.01"
        if (ignoreZero) {
            return "<" + currencyMap.get(currency) + LESS_THAN_ZERO;
        }
        else {
            return currencyMap.get(currency) + ZERO;
        }
    }
    else if (value < 0 || value < 1) {
        if (value < 0.01 && ignoreSmallValue) {
            return "<" + currencyMap.get(currency) + LESS_THAN_ZERO;
        }
    }
    else if (value > 999999999) {
        value = value / 1000000000;
        currencySuffix = "B";
    }
    else if (value > 999999) {
        value = value / 1000000; // convert to M for number from > 1 million
        currencySuffix = "M";
    }
    // Added to round down the number
    const expo = Math.pow(10, decimals);
    value = Math.floor(value * expo) / expo;
    // generates the value with the inputted currency
    const formatter = new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: currency,
        maximumFractionDigits: decimals,
        currencyDisplay: "symbol"
    });
    //replace the occasional incorrect currency symbol from the formatter and replace with correct symbol from currencyMap
    const regex = new RegExp(`${currency}\\s?`);
    const _val = formatter.format(value).replace(regex, currencyMap.get(currency) ?? "$");
    return minus + _val + currencySuffix;
};
//# sourceMappingURL=prettifyCurrency.js.map
import { userAgent } from "../services/CovalentClient";
import { debugOutput } from "./ApiHelpers";
export const DEFAULT_BACKOFF_MAX_RETRIES = 5;
export const BASE_DELAY_MS = 1000; // Base delay in milliseconds
export class ExponentialBackoff {
    constructor(apiKey, debug, maxRetries = DEFAULT_BACKOFF_MAX_RETRIES) {
        this.maxRetries = maxRetries;
        this.retryCount = 1;
        this._apiKey = apiKey;
        this._debug = debug;
    }
    async backOff(url, source) {
        try {
            let startTime;
            if (this._debug) {
                startTime = new Date();
            }
            const response = await fetch(url, {
                headers: {
                    "Authorization": `Bearer ${this._apiKey}`,
                    "X-Requested-With": source ? source + " " + "(" + userAgent + ")" : userAgent
                }
            });
            debugOutput(response ? response.url : url, response ? response.status : 429, startTime);
            if (response.status === null || response.status === 429) {
                throw new Error(`Received status code: ${response.status ?? 429}`);
            }
            else {
                return response.json();
            }
        }
        catch (error) {
            if (error.message.includes(`Received status code: 429`) && this.retryCount < this.maxRetries) {
                this.retryCount++;
                const delayMs = Math.pow(2, this.retryCount) * BASE_DELAY_MS;
                await new Promise((resolve) => setTimeout(resolve, delayMs));
                return this.backOff(url, source);
            }
            return Promise.reject(new Error(`Max retries exceeded: ${this.maxRetries}`));
        }
    }
    // to reset the numAttempts for another request
    setNumAttempts(retryCount) {
        this.retryCount = retryCount;
    }
}
//# sourceMappingURL=backoff.js.map